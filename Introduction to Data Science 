{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GreeshmaBodapati/Data-visualization-/blob/main/Introduction%20to%20Data%20Science%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oznNxWxNvvVk"
      },
      "outputs": [],
      "source": [
        "import random"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pzc440Miv0fO"
      },
      "outputs": [],
      "source": [
        "from google.colab import drive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AJYMNR-X0TkF"
      },
      "outputs": [],
      "source": [
        "#mount the drive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YMbBfmjK0dVA",
        "collapsed": true,
        "outputId": "bd47d21e-ac37-41a7-cfb9-7843c50485e0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        " drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "9PU-4AKd_VzO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datasetpath ='/content/drive/MyDrive/matches_1930_2022.csv'"
      ],
      "metadata": {
        "id": "N9ShSidn_ZQ9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(datasetpath)"
      ],
      "metadata": {
        "id": "lUpKgy0l__5x",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "id": "HCqoEDNWBDce",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "outputId": "b15ba27b-7d66-4e02-db89-e553ce97b8d1",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         home_team away_team  home_score  home_xg  home_penalty  away_score  \\\n",
              "0        Argentina    France           3      3.3           4.0           3   \n",
              "1          Croatia   Morocco           2      0.7           NaN           1   \n",
              "2           France   Morocco           2      2.0           NaN           0   \n",
              "3        Argentina   Croatia           3      2.3           NaN           0   \n",
              "4          Morocco  Portugal           1      1.4           NaN           0   \n",
              "..             ...       ...         ...      ...           ...         ...   \n",
              "959      Argentina    France           1      NaN           NaN           0   \n",
              "960     Yugoslavia    Brazil           2      NaN           NaN           1   \n",
              "961        Romania      Peru           3      NaN           NaN           1   \n",
              "962  United States   Belgium           3      NaN           NaN           0   \n",
              "963         France    Mexico           4      NaN           NaN           1   \n",
              "\n",
              "     away_xg  away_penalty      home_manager          home_captain  ...  \\\n",
              "0        2.2           2.0    Lionel Scaloni          Lionel Messi  ...   \n",
              "1        1.2           NaN      Zlatko Dalić           Luka Modrić  ...   \n",
              "2        0.9           NaN  Didier Deschamps           Hugo Lloris  ...   \n",
              "3        0.5           NaN    Lionel Scaloni          Lionel Messi  ...   \n",
              "4        0.9           NaN   Hoalid Regragui          Romain Saïss  ...   \n",
              "..       ...           ...               ...                   ...  ...   \n",
              "959      NaN           NaN  Francisco Olazar       Manuel Ferreira  ...   \n",
              "960      NaN           NaN   Bosko Simonovic       Milutin Ivković  ...   \n",
              "961      NaN           NaN     Octav Luchide          Emerich Vogl  ...   \n",
              "962      NaN           NaN        Bob Millar            Tom Florie  ...   \n",
              "963      NaN           NaN     Raoul Caudron  Alexandre Villaplane  ...   \n",
              "\n",
              "    home_penalty_shootout_miss_long  \\\n",
              "0                               NaN   \n",
              "1                               NaN   \n",
              "2                               NaN   \n",
              "3                               NaN   \n",
              "4                               NaN   \n",
              "..                              ...   \n",
              "959                             NaN   \n",
              "960                             NaN   \n",
              "961                             NaN   \n",
              "962                             NaN   \n",
              "963                             NaN   \n",
              "\n",
              "                       away_penalty_shootout_miss_long  home_red_card  \\\n",
              "0    ['3|1:1|Kingsley Coman', '5|2:1|Aurélien Tchou...            NaN   \n",
              "1                                                  NaN            NaN   \n",
              "2                                                  NaN            NaN   \n",
              "3                                                  NaN            NaN   \n",
              "4                                                  NaN            NaN   \n",
              "..                                                 ...            ...   \n",
              "959                                                NaN            NaN   \n",
              "960                                                NaN            NaN   \n",
              "961                                                NaN            NaN   \n",
              "962                                                NaN            NaN   \n",
              "963                                                NaN            NaN   \n",
              "\n",
              "            away_red_card   home_yellow_red_card away_yellow_red_card  \\\n",
              "0                     NaN                    NaN                  NaN   \n",
              "1                     NaN                    NaN                  NaN   \n",
              "2                     NaN                    NaN                  NaN   \n",
              "3                     NaN                    NaN                  NaN   \n",
              "4                     NaN  Walid Cheddira · 90+3                  NaN   \n",
              "..                    ...                    ...                  ...   \n",
              "959                   NaN                    NaN                  NaN   \n",
              "960                   NaN                    NaN                  NaN   \n",
              "961  Plácido Galindo · 70                    NaN                  NaN   \n",
              "962                   NaN                    NaN                  NaN   \n",
              "963                   NaN                    NaN                  NaN   \n",
              "\n",
              "                                 home_yellow_card_long  \\\n",
              "0    ['45+7&rsquor;|2:0|Enzo Fernández', '90+8&rsqu...   \n",
              "1                                                  NaN   \n",
              "2                                                  NaN   \n",
              "3    ['68&rsquor;|2:0|Cristian Romero', '71&rsquor;...   \n",
              "4    ['70&rsquor;|1:0|Achraf Dari', '90+1&rsquor;|1...   \n",
              "..                                                 ...   \n",
              "959                                                NaN   \n",
              "960                                                NaN   \n",
              "961                                                NaN   \n",
              "962                                                NaN   \n",
              "963                                                NaN   \n",
              "\n",
              "                                 away_yellow_card_long  \\\n",
              "0    ['55&rsquor;|2:0|Adrien Rabiot', '87&rsquor;|2...   \n",
              "1    ['69&rsquor;|2:1|Azzedine Ounahi', '84&rsquor;...   \n",
              "2                    ['27&rsquor;|1:0|Sofiane Boufal']   \n",
              "3    ['32&rsquor;|0:0|Mateo Kovačić', '32&rsquor;|0...   \n",
              "4                           ['87&rsquor;|1:0|Vitinha']   \n",
              "..                                                 ...   \n",
              "959                                                NaN   \n",
              "960                                                NaN   \n",
              "961                                                NaN   \n",
              "962                                                NaN   \n",
              "963                                                NaN   \n",
              "\n",
              "                               home_substitute_in_long  \\\n",
              "0    ['64&rsquor;|2:0|Marcos Acuña|for Ángel Di Mar...   \n",
              "1    ['61&rsquor;|2:1|Nikola Vlašić|for Andrej Kram...   \n",
              "2    ['65&rsquor;|1:0|Marcus Thuram|for Olivier Gir...   \n",
              "3    ['62&rsquor;|2:0|Lisandro Martínez|for Leandro...   \n",
              "4    ['57&rsquor;|1:0|Achraf Dari|for Romain Saïss'...   \n",
              "..                                                 ...   \n",
              "959                                                NaN   \n",
              "960                                                NaN   \n",
              "961                                                NaN   \n",
              "962                                                NaN   \n",
              "963                                                NaN   \n",
              "\n",
              "                               away_substitute_in_long  \n",
              "0    ['41&rsquor;|2:0|Randal Kolo Muani|for Ousmane...  \n",
              "1    ['46&rsquor;|2:1|Ilias Chair|for Abdelhamid Sa...  \n",
              "2    ['21&rsquor;|1:0|Selim Amallah|for Romain Saïs...  \n",
              "3    ['46&rsquor;|2:0|Mislav Oršić|for Borna Sosa',...  \n",
              "4    ['51&rsquor;|1:0|João Cancelo|for Raphaël Guer...  \n",
              "..                                                 ...  \n",
              "959                                                NaN  \n",
              "960                                                NaN  \n",
              "961                                                NaN  \n",
              "962                                                NaN  \n",
              "963                                                NaN  \n",
              "\n",
              "[964 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-589370f8-f75d-4f69-8e6a-5990c367d68a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>home_score</th>\n",
              "      <th>home_xg</th>\n",
              "      <th>home_penalty</th>\n",
              "      <th>away_score</th>\n",
              "      <th>away_xg</th>\n",
              "      <th>away_penalty</th>\n",
              "      <th>home_manager</th>\n",
              "      <th>home_captain</th>\n",
              "      <th>...</th>\n",
              "      <th>home_penalty_shootout_miss_long</th>\n",
              "      <th>away_penalty_shootout_miss_long</th>\n",
              "      <th>home_red_card</th>\n",
              "      <th>away_red_card</th>\n",
              "      <th>home_yellow_red_card</th>\n",
              "      <th>away_yellow_red_card</th>\n",
              "      <th>home_yellow_card_long</th>\n",
              "      <th>away_yellow_card_long</th>\n",
              "      <th>home_substitute_in_long</th>\n",
              "      <th>away_substitute_in_long</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>France</td>\n",
              "      <td>3</td>\n",
              "      <td>3.3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Lionel Scaloni</td>\n",
              "      <td>Lionel Messi</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['3|1:1|Kingsley Coman', '5|2:1|Aurélien Tchou...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['45+7&amp;rsquor;|2:0|Enzo Fernández', '90+8&amp;rsqu...</td>\n",
              "      <td>['55&amp;rsquor;|2:0|Adrien Rabiot', '87&amp;rsquor;|2...</td>\n",
              "      <td>['64&amp;rsquor;|2:0|Marcos Acuña|for Ángel Di Mar...</td>\n",
              "      <td>['41&amp;rsquor;|2:0|Randal Kolo Muani|for Ousmane...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Croatia</td>\n",
              "      <td>Morocco</td>\n",
              "      <td>2</td>\n",
              "      <td>0.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Zlatko Dalić</td>\n",
              "      <td>Luka Modrić</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['69&amp;rsquor;|2:1|Azzedine Ounahi', '84&amp;rsquor;...</td>\n",
              "      <td>['61&amp;rsquor;|2:1|Nikola Vlašić|for Andrej Kram...</td>\n",
              "      <td>['46&amp;rsquor;|2:1|Ilias Chair|for Abdelhamid Sa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>France</td>\n",
              "      <td>Morocco</td>\n",
              "      <td>2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Didier Deschamps</td>\n",
              "      <td>Hugo Lloris</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['27&amp;rsquor;|1:0|Sofiane Boufal']</td>\n",
              "      <td>['65&amp;rsquor;|1:0|Marcus Thuram|for Olivier Gir...</td>\n",
              "      <td>['21&amp;rsquor;|1:0|Selim Amallah|for Romain Saïs...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>Croatia</td>\n",
              "      <td>3</td>\n",
              "      <td>2.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Lionel Scaloni</td>\n",
              "      <td>Lionel Messi</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['68&amp;rsquor;|2:0|Cristian Romero', '71&amp;rsquor;...</td>\n",
              "      <td>['32&amp;rsquor;|0:0|Mateo Kovačić', '32&amp;rsquor;|0...</td>\n",
              "      <td>['62&amp;rsquor;|2:0|Lisandro Martínez|for Leandro...</td>\n",
              "      <td>['46&amp;rsquor;|2:0|Mislav Oršić|for Borna Sosa',...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Morocco</td>\n",
              "      <td>Portugal</td>\n",
              "      <td>1</td>\n",
              "      <td>1.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Hoalid Regragui</td>\n",
              "      <td>Romain Saïss</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Walid Cheddira · 90+3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['70&amp;rsquor;|1:0|Achraf Dari', '90+1&amp;rsquor;|1...</td>\n",
              "      <td>['87&amp;rsquor;|1:0|Vitinha']</td>\n",
              "      <td>['57&amp;rsquor;|1:0|Achraf Dari|for Romain Saïss'...</td>\n",
              "      <td>['51&amp;rsquor;|1:0|João Cancelo|for Raphaël Guer...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>France</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Francisco Olazar</td>\n",
              "      <td>Manuel Ferreira</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>960</th>\n",
              "      <td>Yugoslavia</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Bosko Simonovic</td>\n",
              "      <td>Milutin Ivković</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>961</th>\n",
              "      <td>Romania</td>\n",
              "      <td>Peru</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Octav Luchide</td>\n",
              "      <td>Emerich Vogl</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Plácido Galindo · 70</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>962</th>\n",
              "      <td>United States</td>\n",
              "      <td>Belgium</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Bob Millar</td>\n",
              "      <td>Tom Florie</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>963</th>\n",
              "      <td>France</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Raoul Caudron</td>\n",
              "      <td>Alexandre Villaplane</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>964 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-589370f8-f75d-4f69-8e6a-5990c367d68a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-589370f8-f75d-4f69-8e6a-5990c367d68a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-589370f8-f75d-4f69-8e6a-5990c367d68a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ddca763a-8085-42c6-a0af-9ae591bbb0e7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ddca763a-8085-42c6-a0af-9ae591bbb0e7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ddca763a-8085-42c6-a0af-9ae591bbb0e7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_72ffee4f-2129-4063-bce1-6cbdcebbfd96\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_72ffee4f-2129-4063-bce1-6cbdcebbfd96 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "F6AMsSAIBHLW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "64205378-eeef-489a-9d54-89aa410bb555",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['home_team', 'away_team', 'home_score', 'home_xg', 'home_penalty',\n",
              "       'away_score', 'away_xg', 'away_penalty', 'home_manager', 'home_captain',\n",
              "       'away_manager', 'away_captain', 'Attendance', 'Venue', 'Officials',\n",
              "       'Round', 'Date', 'Score', 'Referee', 'Notes', 'Host', 'Year',\n",
              "       'home_goal', 'away_goal', 'home_goal_long', 'away_goal_long',\n",
              "       'home_own_goal', 'away_own_goal', 'home_penalty_goal',\n",
              "       'away_penalty_goal', 'home_penalty_miss_long', 'away_penalty_miss_long',\n",
              "       'home_penalty_shootout_goal_long', 'away_penalty_shootout_goal_long',\n",
              "       'home_penalty_shootout_miss_long', 'away_penalty_shootout_miss_long',\n",
              "       'home_red_card', 'away_red_card', 'home_yellow_red_card',\n",
              "       'away_yellow_red_card', 'home_yellow_card_long',\n",
              "       'away_yellow_card_long', 'home_substitute_in_long',\n",
              "       'away_substitute_in_long'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['home_team'].info()"
      ],
      "metadata": {
        "id": "xFknSeM4BJ_R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0839cf21-e504-4bfd-f418-23fd21ed67d1",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.series.Series'>\n",
            "RangeIndex: 964 entries, 0 to 963\n",
            "Series name: home_team\n",
            "Non-Null Count  Dtype \n",
            "--------------  ----- \n",
            "964 non-null    object\n",
            "dtypes: object(1)\n",
            "memory usage: 7.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['home_team'].value_counts()"
      ],
      "metadata": {
        "id": "6b32io5JBT2Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "outputId": "d88fab2a-9e57-467e-d58f-6ed061bc73f2",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "home_team\n",
              "Brazil                    85\n",
              "Argentina                 59\n",
              "Italy                     57\n",
              "England                   40\n",
              "Germany                   40\n",
              "                          ..\n",
              "Jamaica                    1\n",
              "FR Yugoslavia              1\n",
              "Angola                     1\n",
              "Trinidad and Tobago        1\n",
              "Bosnia and Herzegovina     1\n",
              "Name: count, Length: 82, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home_team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Brazil</th>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Argentina</th>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Italy</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>England</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Germany</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Jamaica</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FR Yugoslavia</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angola</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Trinidad and Tobago</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bosnia and Herzegovina</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>82 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Date'].value_counts()"
      ],
      "metadata": {
        "id": "7dNJgj7sBZj0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "outputId": "a6a04ebe-aeb3-4c00-a00e-83c5c735c393",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "1958-06-15    8\n",
              "1958-06-08    8\n",
              "1934-05-27    8\n",
              "1958-06-11    7\n",
              "1938-06-05    6\n",
              "             ..\n",
              "2006-07-08    1\n",
              "2006-07-05    1\n",
              "2006-07-04    1\n",
              "1966-07-25    1\n",
              "2022-12-18    1\n",
              "Name: count, Length: 378, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1958-06-15</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1958-06-08</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1934-05-27</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1958-06-11</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1938-06-05</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006-07-08</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006-07-05</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006-07-04</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1966-07-25</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-12-18</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>378 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Score'].value_counts()"
      ],
      "metadata": {
        "id": "pGPB8fIOBdXO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "outputId": "07753849-be6c-46fd-db57-7feaafc76d64",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Score\n",
              "1–0            118\n",
              "2–1            107\n",
              "1–1             75\n",
              "2–0             71\n",
              "0–0             66\n",
              "              ... \n",
              "(4) 2–2 (3)      1\n",
              "(3) 0–0 (2)      1\n",
              "(4) 2–2 (5)      1\n",
              "(4) 1–1 (3)      1\n",
              "6–5              1\n",
              "Name: count, Length: 71, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Score</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1–0</th>\n",
              "      <td>118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2–1</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1–1</th>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2–0</th>\n",
              "      <td>71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0–0</th>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>(4) 2–2 (3)</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>(3) 0–0 (2)</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>(4) 2–2 (5)</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>(4) 1–1 (3)</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6–5</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>71 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ScoredAboveZero = df['Score'] > '0-0'"
      ],
      "metadata": {
        "id": "ucO7T4WO9wiV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[ScoredAboveZero]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "collapsed": true,
        "id": "v04ZGyxA31vr",
        "outputId": "04b71985-8c8c-401a-d92e-eb5147845e29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         home_team away_team  home_score  home_xg  home_penalty  away_score  \\\n",
              "1          Croatia   Morocco           2      0.7           NaN           1   \n",
              "2           France   Morocco           2      2.0           NaN           0   \n",
              "3        Argentina   Croatia           3      2.3           NaN           0   \n",
              "4          Morocco  Portugal           1      1.4           NaN           0   \n",
              "5          England    France           1      2.4           NaN           2   \n",
              "..             ...       ...         ...      ...           ...         ...   \n",
              "959      Argentina    France           1      NaN           NaN           0   \n",
              "960     Yugoslavia    Brazil           2      NaN           NaN           1   \n",
              "961        Romania      Peru           3      NaN           NaN           1   \n",
              "962  United States   Belgium           3      NaN           NaN           0   \n",
              "963         France    Mexico           4      NaN           NaN           1   \n",
              "\n",
              "     away_xg  away_penalty      home_manager          home_captain  ...  \\\n",
              "1        1.2           NaN      Zlatko Dalić           Luka Modrić  ...   \n",
              "2        0.9           NaN  Didier Deschamps           Hugo Lloris  ...   \n",
              "3        0.5           NaN    Lionel Scaloni          Lionel Messi  ...   \n",
              "4        0.9           NaN   Hoalid Regragui          Romain Saïss  ...   \n",
              "5        0.9           NaN  Gareth Southgate            Harry Kane  ...   \n",
              "..       ...           ...               ...                   ...  ...   \n",
              "959      NaN           NaN  Francisco Olazar       Manuel Ferreira  ...   \n",
              "960      NaN           NaN   Bosko Simonovic       Milutin Ivković  ...   \n",
              "961      NaN           NaN     Octav Luchide          Emerich Vogl  ...   \n",
              "962      NaN           NaN        Bob Millar            Tom Florie  ...   \n",
              "963      NaN           NaN     Raoul Caudron  Alexandre Villaplane  ...   \n",
              "\n",
              "    home_penalty_shootout_miss_long away_penalty_shootout_miss_long  \\\n",
              "1                               NaN                             NaN   \n",
              "2                               NaN                             NaN   \n",
              "3                               NaN                             NaN   \n",
              "4                               NaN                             NaN   \n",
              "5                               NaN                             NaN   \n",
              "..                              ...                             ...   \n",
              "959                             NaN                             NaN   \n",
              "960                             NaN                             NaN   \n",
              "961                             NaN                             NaN   \n",
              "962                             NaN                             NaN   \n",
              "963                             NaN                             NaN   \n",
              "\n",
              "     home_red_card         away_red_card   home_yellow_red_card  \\\n",
              "1              NaN                   NaN                    NaN   \n",
              "2              NaN                   NaN                    NaN   \n",
              "3              NaN                   NaN                    NaN   \n",
              "4              NaN                   NaN  Walid Cheddira · 90+3   \n",
              "5              NaN                   NaN                    NaN   \n",
              "..             ...                   ...                    ...   \n",
              "959            NaN                   NaN                    NaN   \n",
              "960            NaN                   NaN                    NaN   \n",
              "961            NaN  Plácido Galindo · 70                    NaN   \n",
              "962            NaN                   NaN                    NaN   \n",
              "963            NaN                   NaN                    NaN   \n",
              "\n",
              "    away_yellow_red_card                              home_yellow_card_long  \\\n",
              "1                    NaN                                                NaN   \n",
              "2                    NaN                                                NaN   \n",
              "3                    NaN  ['68&rsquor;|2:0|Cristian Romero', '71&rsquor;...   \n",
              "4                    NaN  ['70&rsquor;|1:0|Achraf Dari', '90+1&rsquor;|1...   \n",
              "5                    NaN                   ['90&rsquor;|1:2|Harry Maguire']   \n",
              "..                   ...                                                ...   \n",
              "959                  NaN                                                NaN   \n",
              "960                  NaN                                                NaN   \n",
              "961                  NaN                                                NaN   \n",
              "962                  NaN                                                NaN   \n",
              "963                  NaN                                                NaN   \n",
              "\n",
              "                                 away_yellow_card_long  \\\n",
              "1    ['69&rsquor;|2:1|Azzedine Ounahi', '84&rsquor;...   \n",
              "2                    ['27&rsquor;|1:0|Sofiane Boufal']   \n",
              "3    ['32&rsquor;|0:0|Mateo Kovačić', '32&rsquor;|0...   \n",
              "4                           ['87&rsquor;|1:0|Vitinha']   \n",
              "5    ['43&rsquor;|0:1|Antoine Griezmann', '47&rsquo...   \n",
              "..                                                 ...   \n",
              "959                                                NaN   \n",
              "960                                                NaN   \n",
              "961                                                NaN   \n",
              "962                                                NaN   \n",
              "963                                                NaN   \n",
              "\n",
              "                               home_substitute_in_long  \\\n",
              "1    ['61&rsquor;|2:1|Nikola Vlašić|for Andrej Kram...   \n",
              "2    ['65&rsquor;|1:0|Marcus Thuram|for Olivier Gir...   \n",
              "3    ['62&rsquor;|2:0|Lisandro Martínez|for Leandro...   \n",
              "4    ['57&rsquor;|1:0|Achraf Dari|for Romain Saïss'...   \n",
              "5    ['79&rsquor;|1:2|Raheem Sterling|for Bukayo Sa...   \n",
              "..                                                 ...   \n",
              "959                                                NaN   \n",
              "960                                                NaN   \n",
              "961                                                NaN   \n",
              "962                                                NaN   \n",
              "963                                                NaN   \n",
              "\n",
              "                               away_substitute_in_long  \n",
              "1    ['46&rsquor;|2:1|Ilias Chair|for Abdelhamid Sa...  \n",
              "2    ['21&rsquor;|1:0|Selim Amallah|for Romain Saïs...  \n",
              "3    ['46&rsquor;|2:0|Mislav Oršić|for Borna Sosa',...  \n",
              "4    ['51&rsquor;|1:0|João Cancelo|for Raphaël Guer...  \n",
              "5    ['79&rsquor;|1:2|Kingsley Coman|for Ousmane De...  \n",
              "..                                                 ...  \n",
              "959                                                NaN  \n",
              "960                                                NaN  \n",
              "961                                                NaN  \n",
              "962                                                NaN  \n",
              "963                                                NaN  \n",
              "\n",
              "[929 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2eee5f19-be10-4ae8-ac3e-abd4631a4b7d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>home_score</th>\n",
              "      <th>home_xg</th>\n",
              "      <th>home_penalty</th>\n",
              "      <th>away_score</th>\n",
              "      <th>away_xg</th>\n",
              "      <th>away_penalty</th>\n",
              "      <th>home_manager</th>\n",
              "      <th>home_captain</th>\n",
              "      <th>...</th>\n",
              "      <th>home_penalty_shootout_miss_long</th>\n",
              "      <th>away_penalty_shootout_miss_long</th>\n",
              "      <th>home_red_card</th>\n",
              "      <th>away_red_card</th>\n",
              "      <th>home_yellow_red_card</th>\n",
              "      <th>away_yellow_red_card</th>\n",
              "      <th>home_yellow_card_long</th>\n",
              "      <th>away_yellow_card_long</th>\n",
              "      <th>home_substitute_in_long</th>\n",
              "      <th>away_substitute_in_long</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Croatia</td>\n",
              "      <td>Morocco</td>\n",
              "      <td>2</td>\n",
              "      <td>0.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Zlatko Dalić</td>\n",
              "      <td>Luka Modrić</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['69&amp;rsquor;|2:1|Azzedine Ounahi', '84&amp;rsquor;...</td>\n",
              "      <td>['61&amp;rsquor;|2:1|Nikola Vlašić|for Andrej Kram...</td>\n",
              "      <td>['46&amp;rsquor;|2:1|Ilias Chair|for Abdelhamid Sa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>France</td>\n",
              "      <td>Morocco</td>\n",
              "      <td>2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Didier Deschamps</td>\n",
              "      <td>Hugo Lloris</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['27&amp;rsquor;|1:0|Sofiane Boufal']</td>\n",
              "      <td>['65&amp;rsquor;|1:0|Marcus Thuram|for Olivier Gir...</td>\n",
              "      <td>['21&amp;rsquor;|1:0|Selim Amallah|for Romain Saïs...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>Croatia</td>\n",
              "      <td>3</td>\n",
              "      <td>2.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Lionel Scaloni</td>\n",
              "      <td>Lionel Messi</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['68&amp;rsquor;|2:0|Cristian Romero', '71&amp;rsquor;...</td>\n",
              "      <td>['32&amp;rsquor;|0:0|Mateo Kovačić', '32&amp;rsquor;|0...</td>\n",
              "      <td>['62&amp;rsquor;|2:0|Lisandro Martínez|for Leandro...</td>\n",
              "      <td>['46&amp;rsquor;|2:0|Mislav Oršić|for Borna Sosa',...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Morocco</td>\n",
              "      <td>Portugal</td>\n",
              "      <td>1</td>\n",
              "      <td>1.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Hoalid Regragui</td>\n",
              "      <td>Romain Saïss</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Walid Cheddira · 90+3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['70&amp;rsquor;|1:0|Achraf Dari', '90+1&amp;rsquor;|1...</td>\n",
              "      <td>['87&amp;rsquor;|1:0|Vitinha']</td>\n",
              "      <td>['57&amp;rsquor;|1:0|Achraf Dari|for Romain Saïss'...</td>\n",
              "      <td>['51&amp;rsquor;|1:0|João Cancelo|for Raphaël Guer...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>England</td>\n",
              "      <td>France</td>\n",
              "      <td>1</td>\n",
              "      <td>2.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>0.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Gareth Southgate</td>\n",
              "      <td>Harry Kane</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['90&amp;rsquor;|1:2|Harry Maguire']</td>\n",
              "      <td>['43&amp;rsquor;|0:1|Antoine Griezmann', '47&amp;rsquo...</td>\n",
              "      <td>['79&amp;rsquor;|1:2|Raheem Sterling|for Bukayo Sa...</td>\n",
              "      <td>['79&amp;rsquor;|1:2|Kingsley Coman|for Ousmane De...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>France</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Francisco Olazar</td>\n",
              "      <td>Manuel Ferreira</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>960</th>\n",
              "      <td>Yugoslavia</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Bosko Simonovic</td>\n",
              "      <td>Milutin Ivković</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>961</th>\n",
              "      <td>Romania</td>\n",
              "      <td>Peru</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Octav Luchide</td>\n",
              "      <td>Emerich Vogl</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Plácido Galindo · 70</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>962</th>\n",
              "      <td>United States</td>\n",
              "      <td>Belgium</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Bob Millar</td>\n",
              "      <td>Tom Florie</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>963</th>\n",
              "      <td>France</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Raoul Caudron</td>\n",
              "      <td>Alexandre Villaplane</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>929 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2eee5f19-be10-4ae8-ac3e-abd4631a4b7d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2eee5f19-be10-4ae8-ac3e-abd4631a4b7d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2eee5f19-be10-4ae8-ac3e-abd4631a4b7d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a117233b-6a93-4518-95e9-62c09a3bd40d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a117233b-6a93-4518-95e9-62c09a3bd40d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a117233b-6a93-4518-95e9-62c09a3bd40d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ScoredByBrazil = df['home_team'] == 'Brazil'"
      ],
      "metadata": {
        "id": "oHOvwTwFBsC2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[ScoredAboveZero & ScoredByBrazil]"
      ],
      "metadata": {
        "id": "JpFRyjgXBv4A",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "outputId": "528e34ce-3d6f-4776-9cf8-033f0eb387ae",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    home_team       away_team  home_score  home_xg  home_penalty  away_score  \\\n",
              "11     Brazil  Korea Republic           4      3.6           NaN           1   \n",
              "34     Brazil     Switzerland           1      1.0           NaN           0   \n",
              "51     Brazil          Serbia           2      2.4           NaN           0   \n",
              "71     Brazil         Belgium           1      2.8           NaN           2   \n",
              "74     Brazil          Mexico           2      2.7           NaN           0   \n",
              "..        ...             ...         ...      ...           ...         ...   \n",
              "911    Brazil          Sweden           4      NaN           NaN           2   \n",
              "915    Brazil  Czechoslovakia           2      NaN           NaN           1   \n",
              "917    Brazil  Czechoslovakia           1      NaN           NaN           1   \n",
              "926    Brazil          Poland           6      NaN           NaN           5   \n",
              "951    Brazil         Bolivia           4      NaN           NaN           0   \n",
              "\n",
              "     away_xg  away_penalty         home_manager               home_captain  \\\n",
              "11       0.5           NaN                 Tite               Thiago Silva   \n",
              "34       0.3           NaN                 Tite               Thiago Silva   \n",
              "51       0.2           NaN                 Tite               Thiago Silva   \n",
              "71       0.5           NaN                 Tite                    Miranda   \n",
              "74       0.7           NaN                 Tite               Thiago Silva   \n",
              "..       ...           ...                  ...                        ...   \n",
              "911      NaN           NaN       Ademar Pimenta                   Leônidas   \n",
              "915      NaN           NaN       Ademar Pimenta                   Leônidas   \n",
              "917      NaN           NaN       Ademar Pimenta  Martim Mércio da Silveira   \n",
              "926      NaN           NaN       Ademar Pimenta  Martim Mércio da Silveira   \n",
              "951      NaN           NaN  Pindaro De Carvalho                  Preguinho   \n",
              "\n",
              "     ... home_penalty_shootout_miss_long away_penalty_shootout_miss_long  \\\n",
              "11   ...                             NaN                             NaN   \n",
              "34   ...                             NaN                             NaN   \n",
              "51   ...                             NaN                             NaN   \n",
              "71   ...                             NaN                             NaN   \n",
              "74   ...                             NaN                             NaN   \n",
              "..   ...                             ...                             ...   \n",
              "911  ...                             NaN                             NaN   \n",
              "915  ...                             NaN                             NaN   \n",
              "917  ...                             NaN                             NaN   \n",
              "926  ...                             NaN                             NaN   \n",
              "951  ...                             NaN                             NaN   \n",
              "\n",
              "                              home_red_card  away_red_card  \\\n",
              "11                                      NaN            NaN   \n",
              "34                                      NaN            NaN   \n",
              "51                                      NaN            NaN   \n",
              "71                                      NaN            NaN   \n",
              "74                                      NaN            NaN   \n",
              "..                                      ...            ...   \n",
              "911                                     NaN            NaN   \n",
              "915                                     NaN            NaN   \n",
              "917  Zezé Procópio · 14|Arthur Machado · 89  Jan Říha · 89   \n",
              "926                                     NaN            NaN   \n",
              "951                                     NaN            NaN   \n",
              "\n",
              "    home_yellow_red_card away_yellow_red_card  \\\n",
              "11                   NaN                  NaN   \n",
              "34                   NaN                  NaN   \n",
              "51                   NaN                  NaN   \n",
              "71                   NaN                  NaN   \n",
              "74                   NaN                  NaN   \n",
              "..                   ...                  ...   \n",
              "911                  NaN                  NaN   \n",
              "915                  NaN                  NaN   \n",
              "917                  NaN                  NaN   \n",
              "926                  NaN                  NaN   \n",
              "951                  NaN                  NaN   \n",
              "\n",
              "                                 home_yellow_card_long  \\\n",
              "11                                                 NaN   \n",
              "34                             ['52&rsquor;|0:0|Fred']   \n",
              "51                                                 NaN   \n",
              "71   ['85&rsquor;|1:2|Fernandinho', '90&rsquor;|1:2...   \n",
              "74   ['43&rsquor;|0:0|Filipe Luís', '59&rsquor;|1:0...   \n",
              "..                                                 ...   \n",
              "911                                                NaN   \n",
              "915                                                NaN   \n",
              "917                                                NaN   \n",
              "926                                                NaN   \n",
              "951                                                NaN   \n",
              "\n",
              "                                 away_yellow_card_long  \\\n",
              "11                   ['44&rsquor;|4:0|Jung Woo-young']   \n",
              "34                    ['50&rsquor;|0:0|Fabian Rieder']   \n",
              "51   ['7&rsquor;|0:0|Strahinja Pavlović', '49&rsquo...   \n",
              "71   ['47&rsquor;|0:2|Toby Alderweireld', '71&rsquo...   \n",
              "74   ['38&rsquor;|0:0|Edson Álvarez', '55&rsquor;|1...   \n",
              "..                                                 ...   \n",
              "911                                                NaN   \n",
              "915                                                NaN   \n",
              "917                                                NaN   \n",
              "926                                                NaN   \n",
              "951                                                NaN   \n",
              "\n",
              "                               home_substitute_in_long  \\\n",
              "11   ['63&rsquor;|4:0|Dani Alves|for Éder Militão',...   \n",
              "34   ['46&rsquor;|0:0|Rodrygo|for Lucas Paquetá', '...   \n",
              "51   ['75&rsquor;|2:0|Fred|for Lucas Paquetá', '76&...   \n",
              "71   ['46&rsquor;|0:2|Roberto Firmino|for Willian',...   \n",
              "74   ['80&rsquor;|1:0|Fernandinho|for Paulinho', '8...   \n",
              "..                                                 ...   \n",
              "911                                                NaN   \n",
              "915                                                NaN   \n",
              "917                                                NaN   \n",
              "926                                                NaN   \n",
              "951                                                NaN   \n",
              "\n",
              "                               away_substitute_in_long  \n",
              "11   ['46&rsquor;|4:0|Hong Chul|for Kim Jin-su', '4...  \n",
              "34   ['59&rsquor;|0:0|Edimilson Fernandes|for Ruben...  \n",
              "51   ['57&rsquor;|0:0|Ivan Ilić|for Nemanja Gudelj'...  \n",
              "71   ['83&rsquor;|1:2|Thomas Vermaelen|for Nacer Ch...  \n",
              "74   ['46&rsquor;|0:0|Miguel Layún|for Rafael Márqu...  \n",
              "..                                                 ...  \n",
              "911                                                NaN  \n",
              "915                                                NaN  \n",
              "917                                                NaN  \n",
              "926                                                NaN  \n",
              "951                                                NaN  \n",
              "\n",
              "[81 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b46e7499-f72a-430c-ab33-06af011169c2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>home_score</th>\n",
              "      <th>home_xg</th>\n",
              "      <th>home_penalty</th>\n",
              "      <th>away_score</th>\n",
              "      <th>away_xg</th>\n",
              "      <th>away_penalty</th>\n",
              "      <th>home_manager</th>\n",
              "      <th>home_captain</th>\n",
              "      <th>...</th>\n",
              "      <th>home_penalty_shootout_miss_long</th>\n",
              "      <th>away_penalty_shootout_miss_long</th>\n",
              "      <th>home_red_card</th>\n",
              "      <th>away_red_card</th>\n",
              "      <th>home_yellow_red_card</th>\n",
              "      <th>away_yellow_red_card</th>\n",
              "      <th>home_yellow_card_long</th>\n",
              "      <th>away_yellow_card_long</th>\n",
              "      <th>home_substitute_in_long</th>\n",
              "      <th>away_substitute_in_long</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Korea Republic</td>\n",
              "      <td>4</td>\n",
              "      <td>3.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['44&amp;rsquor;|4:0|Jung Woo-young']</td>\n",
              "      <td>['63&amp;rsquor;|4:0|Dani Alves|for Éder Militão',...</td>\n",
              "      <td>['46&amp;rsquor;|4:0|Hong Chul|for Kim Jin-su', '4...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Switzerland</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['52&amp;rsquor;|0:0|Fred']</td>\n",
              "      <td>['50&amp;rsquor;|0:0|Fabian Rieder']</td>\n",
              "      <td>['46&amp;rsquor;|0:0|Rodrygo|for Lucas Paquetá', '...</td>\n",
              "      <td>['59&amp;rsquor;|0:0|Edimilson Fernandes|for Ruben...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Serbia</td>\n",
              "      <td>2</td>\n",
              "      <td>2.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['7&amp;rsquor;|0:0|Strahinja Pavlović', '49&amp;rsquo...</td>\n",
              "      <td>['75&amp;rsquor;|2:0|Fred|for Lucas Paquetá', '76&amp;...</td>\n",
              "      <td>['57&amp;rsquor;|0:0|Ivan Ilić|for Nemanja Gudelj'...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Belgium</td>\n",
              "      <td>1</td>\n",
              "      <td>2.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Miranda</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['85&amp;rsquor;|1:2|Fernandinho', '90&amp;rsquor;|1:2...</td>\n",
              "      <td>['47&amp;rsquor;|0:2|Toby Alderweireld', '71&amp;rsquo...</td>\n",
              "      <td>['46&amp;rsquor;|0:2|Roberto Firmino|for Willian',...</td>\n",
              "      <td>['83&amp;rsquor;|1:2|Thomas Vermaelen|for Nacer Ch...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>2</td>\n",
              "      <td>2.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['43&amp;rsquor;|0:0|Filipe Luís', '59&amp;rsquor;|1:0...</td>\n",
              "      <td>['38&amp;rsquor;|0:0|Edson Álvarez', '55&amp;rsquor;|1...</td>\n",
              "      <td>['80&amp;rsquor;|1:0|Fernandinho|for Paulinho', '8...</td>\n",
              "      <td>['46&amp;rsquor;|0:0|Miguel Layún|for Rafael Márqu...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>911</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Sweden</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Ademar Pimenta</td>\n",
              "      <td>Leônidas</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>915</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Czechoslovakia</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Ademar Pimenta</td>\n",
              "      <td>Leônidas</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>917</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Czechoslovakia</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Ademar Pimenta</td>\n",
              "      <td>Martim Mércio da Silveira</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Zezé Procópio · 14|Arthur Machado · 89</td>\n",
              "      <td>Jan Říha · 89</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>926</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Poland</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Ademar Pimenta</td>\n",
              "      <td>Martim Mércio da Silveira</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>951</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Bolivia</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Pindaro De Carvalho</td>\n",
              "      <td>Preguinho</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>81 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b46e7499-f72a-430c-ab33-06af011169c2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b46e7499-f72a-430c-ab33-06af011169c2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b46e7499-f72a-430c-ab33-06af011169c2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0df52a05-6cda-4fd0-823d-b8108db289d6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0df52a05-6cda-4fd0-823d-b8108db289d6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0df52a05-6cda-4fd0-823d-b8108db289d6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "brazildf = df[ScoredAboveZero & ScoredByBrazil].sort_values(by = 'home_score',ascending= True)"
      ],
      "metadata": {
        "id": "DPoWsSQiB3zC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "brazildf"
      ],
      "metadata": {
        "id": "AK5Ao3zi5Bt_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "outputId": "558263b5-0856-4369-875e-a7d3f9add158",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    home_team       away_team  home_score  home_xg  home_penalty  away_score  \\\n",
              "512    Brazil       Argentina           0      NaN           NaN           1   \n",
              "261    Brazil          France           0      NaN           NaN           1   \n",
              "695    Brazil          Poland           0      NaN           NaN           1   \n",
              "817    Brazil  Czechoslovakia           0      NaN           NaN           0   \n",
              "679    Brazil           Spain           0      NaN           NaN           0   \n",
              "..        ...             ...         ...      ...           ...         ...   \n",
              "887    Brazil          Mexico           5      NaN           NaN           0   \n",
              "831    Brazil          France           5      NaN           NaN           2   \n",
              "891    Brazil           Spain           6      NaN           NaN           1   \n",
              "926    Brazil          Poland           6      NaN           NaN           5   \n",
              "893    Brazil          Sweden           7      NaN           NaN           1   \n",
              "\n",
              "     away_xg  away_penalty             home_manager  \\\n",
              "512      NaN           NaN       Sebastiao Lazaroni   \n",
              "261      NaN           NaN  Carlos Alberto Parreira   \n",
              "695      NaN           NaN            Mario Zagallo   \n",
              "817      NaN           NaN           Aymore Moreira   \n",
              "679      NaN           NaN         Claudio Coutinho   \n",
              "..       ...           ...                      ...   \n",
              "887      NaN           NaN             Zeze Moreira   \n",
              "831      NaN           NaN            Vicente Feola   \n",
              "891      NaN           NaN             Flavio Costa   \n",
              "926      NaN           NaN           Ademar Pimenta   \n",
              "893      NaN           NaN             Flavio Costa   \n",
              "\n",
              "                  home_captain  ... home_penalty_shootout_miss_long  \\\n",
              "512              Ricardo Gomes  ...                             NaN   \n",
              "261                        NaN  ...                             NaN   \n",
              "695              Marinho Peres  ...                             NaN   \n",
              "817                Mauro Ramos  ...                             NaN   \n",
              "679               Émerson Leão  ...                             NaN   \n",
              "..                         ...  ...                             ...   \n",
              "887                      Bauer  ...                             NaN   \n",
              "831         Hilderaldo Bellini  ...                             NaN   \n",
              "891           Augusto da Costa  ...                             NaN   \n",
              "926  Martim Mércio da Silveira  ...                             NaN   \n",
              "893           Augusto da Costa  ...                             NaN   \n",
              "\n",
              "    away_penalty_shootout_miss_long       home_red_card away_red_card  \\\n",
              "512                             NaN  Ricardo Gomes · 85           NaN   \n",
              "261                             NaN                 NaN           NaN   \n",
              "695                             NaN                 NaN           NaN   \n",
              "817                             NaN                 NaN           NaN   \n",
              "679                             NaN                 NaN           NaN   \n",
              "..                              ...                 ...           ...   \n",
              "887                             NaN                 NaN           NaN   \n",
              "831                             NaN                 NaN           NaN   \n",
              "891                             NaN                 NaN           NaN   \n",
              "926                             NaN                 NaN           NaN   \n",
              "893                             NaN                 NaN           NaN   \n",
              "\n",
              "    home_yellow_red_card away_yellow_red_card  \\\n",
              "512                  NaN                  NaN   \n",
              "261                  NaN                  NaN   \n",
              "695                  NaN                  NaN   \n",
              "817                  NaN                  NaN   \n",
              "679                  NaN                  NaN   \n",
              "..                   ...                  ...   \n",
              "887                  NaN                  NaN   \n",
              "831                  NaN                  NaN   \n",
              "891                  NaN                  NaN   \n",
              "926                  NaN                  NaN   \n",
              "893                  NaN                  NaN   \n",
              "\n",
              "                                 home_yellow_card_long  \\\n",
              "512  ['40&rsquor;|0:0|Ricardo Rocha', '50&rsquor;|0...   \n",
              "261  ['25&rsquor;|0:0|Cafú', '45&rsquor;|0:0|Juan',...   \n",
              "695                       ['76&rsquor;|0:1|Jairzinho']   \n",
              "817                                                NaN   \n",
              "679                                                NaN   \n",
              "..                                                 ...   \n",
              "887                                                NaN   \n",
              "831                                                NaN   \n",
              "891                           ['1&rsquor;|0:0|Bigode']   \n",
              "926                                                NaN   \n",
              "893                                                NaN   \n",
              "\n",
              "                                 away_yellow_card_long  \\\n",
              "512  ['27&rsquor;|0:0|Pedro Monzón', '28&rsquor;|0:...   \n",
              "261  ['74&rsquor;|0:1|Willy Sagnol', '87&rsquor;|0:...   \n",
              "695               ['71&rsquor;|0:0|Henryk Kasperczak']   \n",
              "817                                                NaN   \n",
              "679                     ['1&rsquor;|0:0|Eugenio Leal']   \n",
              "..                                                 ...   \n",
              "887                                                NaN   \n",
              "831                                                NaN   \n",
              "891                                                NaN   \n",
              "926                                                NaN   \n",
              "893                                                NaN   \n",
              "\n",
              "                               home_substitute_in_long  \\\n",
              "512  ['83&rsquor;|0:1|Silas Pereira', '83&rsquor;|0...   \n",
              "261  ['63&rsquor;|0:1|Adriano|for Juninho Pernambuc...   \n",
              "695   ['66&rsquor;|0:0|Mirandinha|for Ademir da Guia']   \n",
              "817                                                NaN   \n",
              "679  ['70&rsquor;|0:0|Gilberto Alves|for Nelinho', ...   \n",
              "..                                                 ...   \n",
              "887                                                NaN   \n",
              "831                                                NaN   \n",
              "891                                                NaN   \n",
              "926                                                NaN   \n",
              "893                                                NaN   \n",
              "\n",
              "                               away_substitute_in_long  \n",
              "512  ['61&rsquor;|0:0|Gabriel Calderón|for Pedro Tr...  \n",
              "261  ['77&rsquor;|0:1|Sidney Govou|for Franck Ribér...  \n",
              "695  ['73&rsquor;|0:0|Lesław Ćmikiewicz|for Henryk ...  \n",
              "817                                                NaN  \n",
              "679  ['51&rsquor;|0:0|Antonio Biosca|for Migueli', ...  \n",
              "..                                                 ...  \n",
              "887                                                NaN  \n",
              "831                                                NaN  \n",
              "891                                                NaN  \n",
              "926                                                NaN  \n",
              "893                                                NaN  \n",
              "\n",
              "[81 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-236e3f38-2d4d-4a19-be20-0e718d3643c7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>home_score</th>\n",
              "      <th>home_xg</th>\n",
              "      <th>home_penalty</th>\n",
              "      <th>away_score</th>\n",
              "      <th>away_xg</th>\n",
              "      <th>away_penalty</th>\n",
              "      <th>home_manager</th>\n",
              "      <th>home_captain</th>\n",
              "      <th>...</th>\n",
              "      <th>home_penalty_shootout_miss_long</th>\n",
              "      <th>away_penalty_shootout_miss_long</th>\n",
              "      <th>home_red_card</th>\n",
              "      <th>away_red_card</th>\n",
              "      <th>home_yellow_red_card</th>\n",
              "      <th>away_yellow_red_card</th>\n",
              "      <th>home_yellow_card_long</th>\n",
              "      <th>away_yellow_card_long</th>\n",
              "      <th>home_substitute_in_long</th>\n",
              "      <th>away_substitute_in_long</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>512</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Argentina</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Sebastiao Lazaroni</td>\n",
              "      <td>Ricardo Gomes</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Ricardo Gomes · 85</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['40&amp;rsquor;|0:0|Ricardo Rocha', '50&amp;rsquor;|0...</td>\n",
              "      <td>['27&amp;rsquor;|0:0|Pedro Monzón', '28&amp;rsquor;|0:...</td>\n",
              "      <td>['83&amp;rsquor;|0:1|Silas Pereira', '83&amp;rsquor;|0...</td>\n",
              "      <td>['61&amp;rsquor;|0:0|Gabriel Calderón|for Pedro Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>261</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>France</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Carlos Alberto Parreira</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['25&amp;rsquor;|0:0|Cafú', '45&amp;rsquor;|0:0|Juan',...</td>\n",
              "      <td>['74&amp;rsquor;|0:1|Willy Sagnol', '87&amp;rsquor;|0:...</td>\n",
              "      <td>['63&amp;rsquor;|0:1|Adriano|for Juninho Pernambuc...</td>\n",
              "      <td>['77&amp;rsquor;|0:1|Sidney Govou|for Franck Ribér...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>695</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Poland</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mario Zagallo</td>\n",
              "      <td>Marinho Peres</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['76&amp;rsquor;|0:1|Jairzinho']</td>\n",
              "      <td>['71&amp;rsquor;|0:0|Henryk Kasperczak']</td>\n",
              "      <td>['66&amp;rsquor;|0:0|Mirandinha|for Ademir da Guia']</td>\n",
              "      <td>['73&amp;rsquor;|0:0|Lesław Ćmikiewicz|for Henryk ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>817</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Czechoslovakia</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Aymore Moreira</td>\n",
              "      <td>Mauro Ramos</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>679</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Spain</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Claudio Coutinho</td>\n",
              "      <td>Émerson Leão</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['1&amp;rsquor;|0:0|Eugenio Leal']</td>\n",
              "      <td>['70&amp;rsquor;|0:0|Gilberto Alves|for Nelinho', ...</td>\n",
              "      <td>['51&amp;rsquor;|0:0|Antonio Biosca|for Migueli', ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Zeze Moreira</td>\n",
              "      <td>Bauer</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>831</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>France</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Vicente Feola</td>\n",
              "      <td>Hilderaldo Bellini</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>891</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Spain</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Flavio Costa</td>\n",
              "      <td>Augusto da Costa</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['1&amp;rsquor;|0:0|Bigode']</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>926</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Poland</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Ademar Pimenta</td>\n",
              "      <td>Martim Mércio da Silveira</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>893</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Sweden</td>\n",
              "      <td>7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Flavio Costa</td>\n",
              "      <td>Augusto da Costa</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>81 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-236e3f38-2d4d-4a19-be20-0e718d3643c7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-236e3f38-2d4d-4a19-be20-0e718d3643c7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-236e3f38-2d4d-4a19-be20-0e718d3643c7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5b0709dd-a9b2-4022-98c7-22a25f963eb8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5b0709dd-a9b2-4022-98c7-22a25f963eb8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5b0709dd-a9b2-4022-98c7-22a25f963eb8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b2c2dc4c-c921-45eb-8920-a2213eaf01ff\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('brazildf')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b2c2dc4c-c921-45eb-8920-a2213eaf01ff button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('brazildf');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "brazildf"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "brazildf.info()"
      ],
      "metadata": {
        "id": "sSXv78yECD2b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "501a29eb-7792-48e4-cc33-70096c1ccd84",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 81 entries, 512 to 893\n",
            "Data columns (total 44 columns):\n",
            " #   Column                           Non-Null Count  Dtype  \n",
            "---  ------                           --------------  -----  \n",
            " 0   home_team                        81 non-null     object \n",
            " 1   away_team                        81 non-null     object \n",
            " 2   home_score                       81 non-null     int64  \n",
            " 3   home_xg                          7 non-null      float64\n",
            " 4   home_penalty                     0 non-null      float64\n",
            " 5   away_score                       81 non-null     int64  \n",
            " 6   away_xg                          7 non-null      float64\n",
            " 7   away_penalty                     0 non-null      float64\n",
            " 8   home_manager                     81 non-null     object \n",
            " 9   home_captain                     59 non-null     object \n",
            " 10  away_manager                     81 non-null     object \n",
            " 11  away_captain                     59 non-null     object \n",
            " 12  Attendance                       81 non-null     int64  \n",
            " 13  Venue                            81 non-null     object \n",
            " 14  Officials                        64 non-null     object \n",
            " 15  Round                            81 non-null     object \n",
            " 16  Date                             81 non-null     object \n",
            " 17  Score                            81 non-null     object \n",
            " 18  Referee                          64 non-null     object \n",
            " 19  Notes                            3 non-null      object \n",
            " 20  Host                             81 non-null     object \n",
            " 21  Year                             81 non-null     int64  \n",
            " 22  home_goal                        71 non-null     object \n",
            " 23  away_goal                        38 non-null     object \n",
            " 24  home_goal_long                   71 non-null     object \n",
            " 25  away_goal_long                   38 non-null     object \n",
            " 26  home_own_goal                    2 non-null      object \n",
            " 27  away_own_goal                    2 non-null      object \n",
            " 28  home_penalty_goal                8 non-null      object \n",
            " 29  away_penalty_goal                8 non-null      object \n",
            " 30  home_penalty_miss_long           0 non-null      object \n",
            " 31  away_penalty_miss_long           0 non-null      object \n",
            " 32  home_penalty_shootout_goal_long  0 non-null      object \n",
            " 33  away_penalty_shootout_goal_long  0 non-null      object \n",
            " 34  home_penalty_shootout_miss_long  0 non-null      object \n",
            " 35  away_penalty_shootout_miss_long  0 non-null      object \n",
            " 36  home_red_card                    4 non-null      object \n",
            " 37  away_red_card                    3 non-null      object \n",
            " 38  home_yellow_red_card             1 non-null      object \n",
            " 39  away_yellow_red_card             3 non-null      object \n",
            " 40  home_yellow_card_long            43 non-null     object \n",
            " 41  away_yellow_card_long            47 non-null     object \n",
            " 42  home_substitute_in_long          51 non-null     object \n",
            " 43  away_substitute_in_long          55 non-null     object \n",
            "dtypes: float64(4), int64(4), object(36)\n",
            "memory usage: 28.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "JmSd_XLtCGwD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot as plt"
      ],
      "metadata": {
        "id": "hK66v30F574d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "brazildf.plot(x='home_score',y='away_score',kind='scatter')\n",
        "plt.xlabel('Home Score')\n",
        "plt.ylabel('Away Score')\n",
        "plt.legend('Takeaway')\n",
        "plt.title('Brazil Matches')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "85a9-GVJCOcb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "outputId": "65fa4ad8-46e8-495f-9c2c-d5619c5a9dd1",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "brazildf.plot(x='Year',y='home_score',kind='hexbin')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Home Score')\n",
        "plt.legend('Takeaway')\n",
        "plt.title('Brazil Matches')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Iux8GFUECZst",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "outputId": "5be7fc49-d377-4683-f66b-564e5e27219d",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'brazildf' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-9fca17b9557d>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbrazildf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Year'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'home_score'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'hexbin'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Year'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Home Score'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Takeaway'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Brazil Matches'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'brazildf' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def AnalyzeFrance():\n",
        "  matchesPlayed = df['home_team'].value_counts()['France']\n",
        "  print(f'Total Number of Matches Played by France: {matchesPlayed}')"
      ],
      "metadata": {
        "id": "30nwLRuqCgYr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "AnalyzeFrance()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "gbeL0uXdbZi7",
        "outputId": "24dd7514-ba82-4de0-d860-4f8909a1d182"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total Number of Matches Played by France: 38\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def AnalyzeTowns():\n",
        "  TownData = df['home_team'].value_counts()\n",
        "  for _ in TownData.index:\n",
        "    print(f'Total Number of Matches Played by {_}: {TownData[_]}')"
      ],
      "metadata": {
        "id": "gAWad2VUbdHA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "AnalyzeTowns()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "_QMdp8-ncLXv",
        "outputId": "8cc6b24d-c006-4a4e-cf1a-c0fed48a1c66"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total Number of Matches Played by Brazil: 85\n",
            "Total Number of Matches Played by Argentina: 59\n",
            "Total Number of Matches Played by Italy: 57\n",
            "Total Number of Matches Played by England: 40\n",
            "Total Number of Matches Played by Germany: 40\n",
            "Total Number of Matches Played by France: 38\n",
            "Total Number of Matches Played by West Germany: 38\n",
            "Total Number of Matches Played by Spain: 34\n",
            "Total Number of Matches Played by Netherlands: 33\n",
            "Total Number of Matches Played by Uruguay: 33\n",
            "Total Number of Matches Played by Sweden: 30\n",
            "Total Number of Matches Played by Belgium: 23\n",
            "Total Number of Matches Played by Portugal: 21\n",
            "Total Number of Matches Played by Poland: 20\n",
            "Total Number of Matches Played by Soviet Union: 18\n",
            "Total Number of Matches Played by Hungary: 18\n",
            "Total Number of Matches Played by Mexico: 18\n",
            "Total Number of Matches Played by Korea Republic: 18\n",
            "Total Number of Matches Played by Switzerland: 16\n",
            "Total Number of Matches Played by United States: 16\n",
            "Total Number of Matches Played by Yugoslavia: 16\n",
            "Total Number of Matches Played by Japan: 15\n",
            "Total Number of Matches Played by Chile: 14\n",
            "Total Number of Matches Played by Cameroon: 13\n",
            "Total Number of Matches Played by Austria: 12\n",
            "Total Number of Matches Played by Paraguay: 11\n",
            "Total Number of Matches Played by Nigeria: 11\n",
            "Total Number of Matches Played by Denmark: 10\n",
            "Total Number of Matches Played by Czechoslovakia: 10\n",
            "Total Number of Matches Played by Croatia: 10\n",
            "Total Number of Matches Played by Scotland: 9\n",
            "Total Number of Matches Played by Romania: 9\n",
            "Total Number of Matches Played by Colombia: 8\n",
            "Total Number of Matches Played by Morocco: 8\n",
            "Total Number of Matches Played by Saudi Arabia: 8\n",
            "Total Number of Matches Played by Australia: 8\n",
            "Total Number of Matches Played by Costa Rica: 8\n",
            "Total Number of Matches Played by Tunisia: 7\n",
            "Total Number of Matches Played by Bulgaria: 7\n",
            "Total Number of Matches Played by Peru: 6\n",
            "Total Number of Matches Played by South Africa: 6\n",
            "Total Number of Matches Played by Russia: 6\n",
            "Total Number of Matches Played by Algeria: 6\n",
            "Total Number of Matches Played by Ecuador: 5\n",
            "Total Number of Matches Played by IR Iran: 5\n",
            "Total Number of Matches Played by Ghana: 5\n",
            "Total Number of Matches Played by Republic of Ireland: 5\n",
            "Total Number of Matches Played by Honduras: 5\n",
            "Total Number of Matches Played by Northern Ireland: 5\n",
            "Total Number of Matches Played by Serbia: 4\n",
            "Total Number of Matches Played by Greece: 4\n",
            "Total Number of Matches Played by Senegal: 4\n",
            "Total Number of Matches Played by Korea DPR: 3\n",
            "Total Number of Matches Played by Germany DR: 3\n",
            "Total Number of Matches Played by Slovenia: 3\n",
            "Total Number of Matches Played by Côte d'Ivoire: 3\n",
            "Total Number of Matches Played by Wales: 3\n",
            "Total Number of Matches Played by Iraq: 2\n",
            "Total Number of Matches Played by Zaire: 2\n",
            "Total Number of Matches Played by Cuba: 2\n",
            "Total Number of Matches Played by Canada: 2\n",
            "Total Number of Matches Played by Qatar: 2\n",
            "Total Number of Matches Played by Slovakia: 2\n",
            "Total Number of Matches Played by Czech Republic: 2\n",
            "Total Number of Matches Played by Togo: 2\n",
            "Total Number of Matches Played by Türkiye: 2\n",
            "Total Number of Matches Played by China PR: 1\n",
            "Total Number of Matches Played by United Arab Emirates: 1\n",
            "Total Number of Matches Played by Haiti: 1\n",
            "Total Number of Matches Played by Panama: 1\n",
            "Total Number of Matches Played by Iceland: 1\n",
            "Total Number of Matches Played by Egypt: 1\n",
            "Total Number of Matches Played by Ukraine: 1\n",
            "Total Number of Matches Played by New Zealand: 1\n",
            "Total Number of Matches Played by Norway: 1\n",
            "Total Number of Matches Played by Bolivia: 1\n",
            "Total Number of Matches Played by Serbia and Montenegro: 1\n",
            "Total Number of Matches Played by Jamaica: 1\n",
            "Total Number of Matches Played by FR Yugoslavia: 1\n",
            "Total Number of Matches Played by Angola: 1\n",
            "Total Number of Matches Played by Trinidad and Tobago: 1\n",
            "Total Number of Matches Played by Bosnia and Herzegovina: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TownName = []\n",
        "matchesPlayed = []\n",
        "TownData = df['home_team'].value_counts()\n",
        "for _ in TownData.index:\n",
        "   if TownData[_] > 30:\n",
        "     TownName.append(_)\n",
        "     matchesPlayed.append(TownData[_])\n"
      ],
      "metadata": {
        "id": "5AIO6vWLcQXO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "TownName"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "APk5zfoleScj",
        "outputId": "f68c052e-5d00-4364-fe20-bbda10c8bda7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Brazil',\n",
              " 'Argentina',\n",
              " 'Italy',\n",
              " 'England',\n",
              " 'Germany',\n",
              " 'France',\n",
              " 'West Germany',\n",
              " 'Spain',\n",
              " 'Netherlands',\n",
              " 'Uruguay']"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " from matplotlib import pyplot as plt"
      ],
      "metadata": {
        "id": "YxOU86UPeXZu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(matchesPlayed,TownName)\n",
        "plt.xlabel('Town Name')\n",
        "plt.ylabel('Matches Played')\n",
        "plt.title('Matches Played by Town')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ySK04fLjegE6",
        "outputId": "1d42bb6a-6282-43a9-f821-bebd54bae849"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1 = df['home_team'].value_counts()"
      ],
      "metadata": {
        "id": "TkPKnU7Pe2Cq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Above30 = df['home_team'].value_counts()"
      ],
      "metadata": {
        "id": "R6Dnz5cOfrv9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filteredData = Above30[Above30 > 30]"
      ],
      "metadata": {
        "id": "L9VMLYyueqGG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def matchesPlayedByTown():\n",
        "  TownName = []\n",
        "  matchesPlayed = []\n",
        "  TownData = df['home_team'].value_counts()\n",
        "  for _ in TownData.index:\n",
        "    if TownData[_] > 30:\n",
        "      TownName.append(_)\n",
        "      matchesPlayed.append(TownData[_])\n",
        "  plt.bar(matchesPlayed,TownName)\n",
        "  plt.xlabel('Town Name')\n",
        "  plt.ylabel('Matches Played')\n",
        "  plt.title('Matches Played by Town')\n",
        "  plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "B4EJrfnTihBe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "matchesPlayedByTown()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "2wlsLJ9njP2a",
        "outputId": "343e0bb4-960b-4035-8122-87384270a2db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def matchesPlayedByTown():\n",
        "  TownName = []\n",
        "  matchesPlayed = []\n",
        "  TownData = df['home_team'].value_counts()\n",
        "  for _ in TownData.index:\n",
        "    if TownData[_] > 30:\n",
        "      TownName.append(_)\n",
        "      matchesPlayed.append(TownData[_])\n",
        "  plt.bar(matchesPlayed,TownName)\n",
        "  plt.xlabel('Town Name')\n",
        "  plt.ylabel('Matches Played')\n",
        "  plt.title(' Town Name vs Matches Played')\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "cv_RLZ2KjsFK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "matchesPlayedByTown()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "LkEFrf57kb1G",
        "outputId": "46260cc5-971d-4f51-d0e7-ed089fd24a0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Above30 = df['home_team'].value_counts()"
      ],
      "metadata": {
        "id": "gBQaMnNjmIXB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filteredData = Above30[Above30 > 30]"
      ],
      "metadata": {
        "id": "qZUO9xh-mSMs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filteredData"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "x5_-nWysmWvU",
        "outputId": "8a7a4da4-0228-4178-f2bb-8603c0783128"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "home_team\n",
              "Brazil          85\n",
              "Argentina       59\n",
              "Italy           57\n",
              "England         40\n",
              "Germany         40\n",
              "France          38\n",
              "West Germany    38\n",
              "Spain           34\n",
              "Netherlands     33\n",
              "Uruguay         33\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home_team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Brazil</th>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Argentina</th>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Italy</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>England</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Germany</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>France</th>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>West Germany</th>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Spain</th>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Netherlands</th>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Uruguay</th>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "filteredData.plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 555
        },
        "id": "OrsQcIJqmcef",
        "outputId": "1dd6ea90-08b7-4fd6-d6be-ed2a59393dc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='home_team'>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def MatchesPlayedByTown2():\n",
        "  Above30 = df['home_team'].value_counts()\n",
        "  filteredData = Above30[Above30 > 30]\n",
        "  filteredData.plot(kind='barh')"
      ],
      "metadata": {
        "id": "nmkfWKoxki2q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "MatchesPlayedByTown2()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "3CnnFF1rkvBT",
        "outputId": "d408ef25-336c-4674-86e3-142d0b087b5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['home_team'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "fNR087UZcyPx",
        "outputId": "8168f50c-be8b-4e67-e0b8-ac4eda61b1fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "home_team\n",
              "Brazil                    85\n",
              "Argentina                 59\n",
              "Italy                     57\n",
              "England                   40\n",
              "Germany                   40\n",
              "                          ..\n",
              "Jamaica                    1\n",
              "FR Yugoslavia              1\n",
              "Angola                     1\n",
              "Trinidad and Tobago        1\n",
              "Bosnia and Herzegovina     1\n",
              "Name: count, Length: 82, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home_team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Brazil</th>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Argentina</th>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Italy</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>England</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Germany</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Jamaica</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FR Yugoslavia</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angola</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Trinidad and Tobago</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bosnia and Herzegovina</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>82 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "filteredData = df['home_team'].value_counts()"
      ],
      "metadata": {
        "id": "FwMYKsd2dDkH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "f2 = filteredData[filteredData >= 40].index"
      ],
      "metadata": {
        "id": "rwAnSuxLdDJg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "f2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K8ACXW7VcyrH",
        "outputId": "ac2ecade-4e28-41ce-ac47-464243965c18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Brazil', 'Argentina', 'Italy', 'England', 'Germany'], dtype='object', name='home_team')"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = df[df[\"home_team\"].isin(f2)]"
      ],
      "metadata": {
        "collapsed": true,
        "id": "2-X_TiVXczOw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "collapsed": true,
        "id": "l0xN857adcO7",
        "outputId": "3be568aa-4865-45a5-ec45-81f230cc3c8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     home_team       away_team  home_score  home_xg  home_penalty  away_score  \\\n",
              "0    Argentina          France           3      3.3           4.0           3   \n",
              "3    Argentina         Croatia           3      2.3           NaN           0   \n",
              "5      England          France           1      2.4           NaN           2   \n",
              "11      Brazil  Korea Republic           4      3.6           NaN           1   \n",
              "13     England         Senegal           3      1.0           NaN           0   \n",
              "..         ...             ...         ...      ...           ...         ...   \n",
              "948  Argentina   United States           6      NaN           NaN           1   \n",
              "949  Argentina           Chile           3      NaN           NaN           1   \n",
              "951     Brazil         Bolivia           4      NaN           NaN           0   \n",
              "954  Argentina          Mexico           6      NaN           NaN           3   \n",
              "959  Argentina          France           1      NaN           NaN           0   \n",
              "\n",
              "     away_xg  away_penalty         home_manager     home_captain  ...  \\\n",
              "0        2.2           2.0       Lionel Scaloni     Lionel Messi  ...   \n",
              "3        0.5           NaN       Lionel Scaloni     Lionel Messi  ...   \n",
              "5        0.9           NaN     Gareth Southgate       Harry Kane  ...   \n",
              "11       0.5           NaN                 Tite     Thiago Silva  ...   \n",
              "13       0.8           NaN     Gareth Southgate       Harry Kane  ...   \n",
              "..       ...           ...                  ...              ...  ...   \n",
              "948      NaN           NaN     Francisco Olazar  Manuel Ferreira  ...   \n",
              "949      NaN           NaN     Francisco Olazar  Manuel Ferreira  ...   \n",
              "951      NaN           NaN  Pindaro De Carvalho        Preguinho  ...   \n",
              "954      NaN           NaN     Francisco Olazar     Ángel Bossio  ...   \n",
              "959      NaN           NaN     Francisco Olazar  Manuel Ferreira  ...   \n",
              "\n",
              "    home_penalty_shootout_miss_long  \\\n",
              "0                               NaN   \n",
              "3                               NaN   \n",
              "5                               NaN   \n",
              "11                              NaN   \n",
              "13                              NaN   \n",
              "..                              ...   \n",
              "948                             NaN   \n",
              "949                             NaN   \n",
              "951                             NaN   \n",
              "954                             NaN   \n",
              "959                             NaN   \n",
              "\n",
              "                       away_penalty_shootout_miss_long  home_red_card  \\\n",
              "0    ['3|1:1|Kingsley Coman', '5|2:1|Aurélien Tchou...            NaN   \n",
              "3                                                  NaN            NaN   \n",
              "5                                                  NaN            NaN   \n",
              "11                                                 NaN            NaN   \n",
              "13                                                 NaN            NaN   \n",
              "..                                                 ...            ...   \n",
              "948                                                NaN            NaN   \n",
              "949                                                NaN            NaN   \n",
              "951                                                NaN            NaN   \n",
              "954                                                NaN            NaN   \n",
              "959                                                NaN            NaN   \n",
              "\n",
              "    away_red_card home_yellow_red_card away_yellow_red_card  \\\n",
              "0             NaN                  NaN                  NaN   \n",
              "3             NaN                  NaN                  NaN   \n",
              "5             NaN                  NaN                  NaN   \n",
              "11            NaN                  NaN                  NaN   \n",
              "13            NaN                  NaN                  NaN   \n",
              "..            ...                  ...                  ...   \n",
              "948           NaN                  NaN                  NaN   \n",
              "949           NaN                  NaN                  NaN   \n",
              "951           NaN                  NaN                  NaN   \n",
              "954           NaN                  NaN                  NaN   \n",
              "959           NaN                  NaN                  NaN   \n",
              "\n",
              "                                 home_yellow_card_long  \\\n",
              "0    ['45+7&rsquor;|2:0|Enzo Fernández', '90+8&rsqu...   \n",
              "3    ['68&rsquor;|2:0|Cristian Romero', '71&rsquor;...   \n",
              "5                     ['90&rsquor;|1:2|Harry Maguire']   \n",
              "11                                                 NaN   \n",
              "13                                                 NaN   \n",
              "..                                                 ...   \n",
              "948                                                NaN   \n",
              "949                                                NaN   \n",
              "951                                                NaN   \n",
              "954                                                NaN   \n",
              "959                                                NaN   \n",
              "\n",
              "                                 away_yellow_card_long  \\\n",
              "0    ['55&rsquor;|2:0|Adrien Rabiot', '87&rsquor;|2...   \n",
              "3    ['32&rsquor;|0:0|Mateo Kovačić', '32&rsquor;|0...   \n",
              "5    ['43&rsquor;|0:1|Antoine Griezmann', '47&rsquo...   \n",
              "11                   ['44&rsquor;|4:0|Jung Woo-young']   \n",
              "13                ['76&rsquor;|3:0|Kalidou Koulibaly']   \n",
              "..                                                 ...   \n",
              "948                                                NaN   \n",
              "949                                                NaN   \n",
              "951                                                NaN   \n",
              "954                                                NaN   \n",
              "959                                                NaN   \n",
              "\n",
              "                               home_substitute_in_long  \\\n",
              "0    ['64&rsquor;|2:0|Marcos Acuña|for Ángel Di Mar...   \n",
              "3    ['62&rsquor;|2:0|Lisandro Martínez|for Leandro...   \n",
              "5    ['79&rsquor;|1:2|Raheem Sterling|for Bukayo Sa...   \n",
              "11   ['63&rsquor;|4:0|Dani Alves|for Éder Militão',...   \n",
              "13   ['65&rsquor;|3:0|Jack Grealish|for Phil Foden'...   \n",
              "..                                                 ...   \n",
              "948                                                NaN   \n",
              "949                                                NaN   \n",
              "951                                                NaN   \n",
              "954                                                NaN   \n",
              "959                                                NaN   \n",
              "\n",
              "                               away_substitute_in_long  \n",
              "0    ['41&rsquor;|2:0|Randal Kolo Muani|for Ousmane...  \n",
              "3    ['46&rsquor;|2:0|Mislav Oršić|for Borna Sosa',...  \n",
              "5    ['79&rsquor;|1:2|Kingsley Coman|for Ousmane De...  \n",
              "11   ['46&rsquor;|4:0|Hong Chul|for Kim Jin-su', '4...  \n",
              "13   ['46&rsquor;|2:0|Pape Matar Sarr|for Krépin Di...  \n",
              "..                                                 ...  \n",
              "948                                                NaN  \n",
              "949                                                NaN  \n",
              "951                                                NaN  \n",
              "954                                                NaN  \n",
              "959                                                NaN  \n",
              "\n",
              "[281 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d5c5658a-90a4-4847-b778-56909eef7885\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>home_score</th>\n",
              "      <th>home_xg</th>\n",
              "      <th>home_penalty</th>\n",
              "      <th>away_score</th>\n",
              "      <th>away_xg</th>\n",
              "      <th>away_penalty</th>\n",
              "      <th>home_manager</th>\n",
              "      <th>home_captain</th>\n",
              "      <th>...</th>\n",
              "      <th>home_penalty_shootout_miss_long</th>\n",
              "      <th>away_penalty_shootout_miss_long</th>\n",
              "      <th>home_red_card</th>\n",
              "      <th>away_red_card</th>\n",
              "      <th>home_yellow_red_card</th>\n",
              "      <th>away_yellow_red_card</th>\n",
              "      <th>home_yellow_card_long</th>\n",
              "      <th>away_yellow_card_long</th>\n",
              "      <th>home_substitute_in_long</th>\n",
              "      <th>away_substitute_in_long</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>France</td>\n",
              "      <td>3</td>\n",
              "      <td>3.3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Lionel Scaloni</td>\n",
              "      <td>Lionel Messi</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['3|1:1|Kingsley Coman', '5|2:1|Aurélien Tchou...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['45+7&amp;rsquor;|2:0|Enzo Fernández', '90+8&amp;rsqu...</td>\n",
              "      <td>['55&amp;rsquor;|2:0|Adrien Rabiot', '87&amp;rsquor;|2...</td>\n",
              "      <td>['64&amp;rsquor;|2:0|Marcos Acuña|for Ángel Di Mar...</td>\n",
              "      <td>['41&amp;rsquor;|2:0|Randal Kolo Muani|for Ousmane...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>Croatia</td>\n",
              "      <td>3</td>\n",
              "      <td>2.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Lionel Scaloni</td>\n",
              "      <td>Lionel Messi</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['68&amp;rsquor;|2:0|Cristian Romero', '71&amp;rsquor;...</td>\n",
              "      <td>['32&amp;rsquor;|0:0|Mateo Kovačić', '32&amp;rsquor;|0...</td>\n",
              "      <td>['62&amp;rsquor;|2:0|Lisandro Martínez|for Leandro...</td>\n",
              "      <td>['46&amp;rsquor;|2:0|Mislav Oršić|for Borna Sosa',...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>England</td>\n",
              "      <td>France</td>\n",
              "      <td>1</td>\n",
              "      <td>2.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>0.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Gareth Southgate</td>\n",
              "      <td>Harry Kane</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['90&amp;rsquor;|1:2|Harry Maguire']</td>\n",
              "      <td>['43&amp;rsquor;|0:1|Antoine Griezmann', '47&amp;rsquo...</td>\n",
              "      <td>['79&amp;rsquor;|1:2|Raheem Sterling|for Bukayo Sa...</td>\n",
              "      <td>['79&amp;rsquor;|1:2|Kingsley Coman|for Ousmane De...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Korea Republic</td>\n",
              "      <td>4</td>\n",
              "      <td>3.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['44&amp;rsquor;|4:0|Jung Woo-young']</td>\n",
              "      <td>['63&amp;rsquor;|4:0|Dani Alves|for Éder Militão',...</td>\n",
              "      <td>['46&amp;rsquor;|4:0|Hong Chul|for Kim Jin-su', '4...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>England</td>\n",
              "      <td>Senegal</td>\n",
              "      <td>3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Gareth Southgate</td>\n",
              "      <td>Harry Kane</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['76&amp;rsquor;|3:0|Kalidou Koulibaly']</td>\n",
              "      <td>['65&amp;rsquor;|3:0|Jack Grealish|for Phil Foden'...</td>\n",
              "      <td>['46&amp;rsquor;|2:0|Pape Matar Sarr|for Krépin Di...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>948</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>United States</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Francisco Olazar</td>\n",
              "      <td>Manuel Ferreira</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>949</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>Chile</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Francisco Olazar</td>\n",
              "      <td>Manuel Ferreira</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>951</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Bolivia</td>\n",
              "      <td>4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Pindaro De Carvalho</td>\n",
              "      <td>Preguinho</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>954</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Francisco Olazar</td>\n",
              "      <td>Ángel Bossio</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>France</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Francisco Olazar</td>\n",
              "      <td>Manuel Ferreira</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>281 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5c5658a-90a4-4847-b778-56909eef7885')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d5c5658a-90a4-4847-b778-56909eef7885 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d5c5658a-90a4-4847-b778-56909eef7885');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7a0a600d-10b8-41b7-9cd4-62fa135083c5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7a0a600d-10b8-41b7-9cd4-62fa135083c5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7a0a600d-10b8-41b7-9cd4-62fa135083c5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_29cee58a-7969-4b52-975b-2e5d334b5189\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_29cee58a-7969-4b52-975b-2e5d334b5189 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2[\"home_xg\"].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "collapsed": true,
        "id": "2SjnGRmFd4Fd",
        "outputId": "3d1c8e88-48e9-49ed-ff80-5270f5760cdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "home_xg\n",
              "2.2    2\n",
              "2.4    2\n",
              "1.0    2\n",
              "1.4    2\n",
              "2.8    2\n",
              "2.1    1\n",
              "1.3    1\n",
              "2.6    1\n",
              "0.9    1\n",
              "2.7    1\n",
              "3.3    1\n",
              "2.3    1\n",
              "3.1    1\n",
              "0.8    1\n",
              "0.3    1\n",
              "1.6    1\n",
              "3.6    1\n",
              "1.9    1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home_xg</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2.2</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.4</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.4</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.8</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.1</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.6</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.9</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.7</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.1</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.8</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.6</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.6</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.9</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "_yYlUA5ygVaV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2.plot(x='home_team',y='home_xg',kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "_wNAYSaYgmAc",
        "outputId": "20ce17cf-69a1-43a8-bce3-49c61fff7118"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='home_team'>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f3 = df2['home_xg'] > 2.5"
      ],
      "metadata": {
        "id": "MVEanp_2gl9Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df3 = df2[f3]"
      ],
      "metadata": {
        "id": "nRnO4w-vgl6s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "collapsed": true,
        "id": "5ldCKqb-hNM8",
        "outputId": "3fa81ee7-ba2d-48ab-d993-1e3d513cc3b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     home_team       away_team  home_score  home_xg  home_penalty  away_score  \\\n",
              "0    Argentina          France           3      3.3           4.0           3   \n",
              "11      Brazil  Korea Republic           4      3.6           NaN           1   \n",
              "53     Germany           Japan           1      3.1           NaN           2   \n",
              "71      Brazil         Belgium           1      2.8           NaN           2   \n",
              "74      Brazil          Mexico           2      2.7           NaN           0   \n",
              "96     England          Panama           6      2.8           NaN           1   \n",
              "102     Brazil      Costa Rica           2      2.6           NaN           0   \n",
              "\n",
              "     away_xg  away_penalty      home_manager  home_captain  ...  \\\n",
              "0        2.2           2.0    Lionel Scaloni  Lionel Messi  ...   \n",
              "11       0.5           NaN              Tite  Thiago Silva  ...   \n",
              "53       1.5           NaN       Hansi Flick  Manuel Neuer  ...   \n",
              "71       0.5           NaN              Tite       Miranda  ...   \n",
              "74       0.7           NaN              Tite  Thiago Silva  ...   \n",
              "96       1.1           NaN  Gareth Southgate    Harry Kane  ...   \n",
              "102      0.1           NaN              Tite  Thiago Silva  ...   \n",
              "\n",
              "    home_penalty_shootout_miss_long  \\\n",
              "0                               NaN   \n",
              "11                              NaN   \n",
              "53                              NaN   \n",
              "71                              NaN   \n",
              "74                              NaN   \n",
              "96                              NaN   \n",
              "102                             NaN   \n",
              "\n",
              "                       away_penalty_shootout_miss_long  home_red_card  \\\n",
              "0    ['3|1:1|Kingsley Coman', '5|2:1|Aurélien Tchou...            NaN   \n",
              "11                                                 NaN            NaN   \n",
              "53                                                 NaN            NaN   \n",
              "71                                                 NaN            NaN   \n",
              "74                                                 NaN            NaN   \n",
              "96                                                 NaN            NaN   \n",
              "102                                                NaN            NaN   \n",
              "\n",
              "    away_red_card home_yellow_red_card away_yellow_red_card  \\\n",
              "0             NaN                  NaN                  NaN   \n",
              "11            NaN                  NaN                  NaN   \n",
              "53            NaN                  NaN                  NaN   \n",
              "71            NaN                  NaN                  NaN   \n",
              "74            NaN                  NaN                  NaN   \n",
              "96            NaN                  NaN                  NaN   \n",
              "102           NaN                  NaN                  NaN   \n",
              "\n",
              "                                 home_yellow_card_long  \\\n",
              "0    ['45+7&rsquor;|2:0|Enzo Fernández', '90+8&rsqu...   \n",
              "11                                                 NaN   \n",
              "53                                                 NaN   \n",
              "71   ['85&rsquor;|1:2|Fernandinho', '90&rsquor;|1:2...   \n",
              "74   ['43&rsquor;|0:0|Filipe Luís', '59&rsquor;|1:0...   \n",
              "96               ['23&rsquor;|2:0|Ruben Loftus-Cheek']   \n",
              "102  ['81&rsquor;|0:0|Philippe Coutinho', '81&rsquo...   \n",
              "\n",
              "                                 away_yellow_card_long  \\\n",
              "0    ['55&rsquor;|2:0|Adrien Rabiot', '87&rsquor;|2...   \n",
              "11                   ['44&rsquor;|4:0|Jung Woo-young']   \n",
              "53                                                 NaN   \n",
              "71   ['47&rsquor;|0:2|Toby Alderweireld', '71&rsquo...   \n",
              "74   ['38&rsquor;|0:0|Edson Álvarez', '55&rsquor;|1...   \n",
              "96   ['10&rsquor;|1:0|Armando Cooper', '44&rsquor;|...   \n",
              "102                   ['84&rsquor;|0:0|Johnny Acosta']   \n",
              "\n",
              "                               home_substitute_in_long  \\\n",
              "0    ['64&rsquor;|2:0|Marcos Acuña|for Ángel Di Mar...   \n",
              "11   ['63&rsquor;|4:0|Dani Alves|for Éder Militão',...   \n",
              "53   ['67&rsquor;|1:0|Jonas Hofmann|for Thomas Müll...   \n",
              "71   ['46&rsquor;|0:2|Roberto Firmino|for Willian',...   \n",
              "74   ['80&rsquor;|1:0|Fernandinho|for Paulinho', '8...   \n",
              "96   ['63&rsquor;|6:0|Jamie Vardy|for Harry Kane', ...   \n",
              "102  ['46&rsquor;|0:0|Douglas Costa|for Willian', '...   \n",
              "\n",
              "                               away_substitute_in_long  \n",
              "0    ['41&rsquor;|2:0|Randal Kolo Muani|for Ousmane...  \n",
              "11   ['46&rsquor;|4:0|Hong Chul|for Kim Jin-su', '4...  \n",
              "53   ['46&rsquor;|1:0|Takehiro Tomiyasu|for Takefus...  \n",
              "71   ['83&rsquor;|1:2|Thomas Vermaelen|for Nacer Ch...  \n",
              "74   ['46&rsquor;|0:0|Miguel Layún|for Rafael Márqu...  \n",
              "96   ['62&rsquor;|5:0|Ricardo Ávila|for Aníbal Godo...  \n",
              "102  ['54&rsquor;|0:0|Christian Bolaños|for Marco U...  \n",
              "\n",
              "[7 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8d69cb36-4744-4e1f-adb9-e016aafd94b4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>home_score</th>\n",
              "      <th>home_xg</th>\n",
              "      <th>home_penalty</th>\n",
              "      <th>away_score</th>\n",
              "      <th>away_xg</th>\n",
              "      <th>away_penalty</th>\n",
              "      <th>home_manager</th>\n",
              "      <th>home_captain</th>\n",
              "      <th>...</th>\n",
              "      <th>home_penalty_shootout_miss_long</th>\n",
              "      <th>away_penalty_shootout_miss_long</th>\n",
              "      <th>home_red_card</th>\n",
              "      <th>away_red_card</th>\n",
              "      <th>home_yellow_red_card</th>\n",
              "      <th>away_yellow_red_card</th>\n",
              "      <th>home_yellow_card_long</th>\n",
              "      <th>away_yellow_card_long</th>\n",
              "      <th>home_substitute_in_long</th>\n",
              "      <th>away_substitute_in_long</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>France</td>\n",
              "      <td>3</td>\n",
              "      <td>3.3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Lionel Scaloni</td>\n",
              "      <td>Lionel Messi</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['3|1:1|Kingsley Coman', '5|2:1|Aurélien Tchou...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['45+7&amp;rsquor;|2:0|Enzo Fernández', '90+8&amp;rsqu...</td>\n",
              "      <td>['55&amp;rsquor;|2:0|Adrien Rabiot', '87&amp;rsquor;|2...</td>\n",
              "      <td>['64&amp;rsquor;|2:0|Marcos Acuña|for Ángel Di Mar...</td>\n",
              "      <td>['41&amp;rsquor;|2:0|Randal Kolo Muani|for Ousmane...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Korea Republic</td>\n",
              "      <td>4</td>\n",
              "      <td>3.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['44&amp;rsquor;|4:0|Jung Woo-young']</td>\n",
              "      <td>['63&amp;rsquor;|4:0|Dani Alves|for Éder Militão',...</td>\n",
              "      <td>['46&amp;rsquor;|4:0|Hong Chul|for Kim Jin-su', '4...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>Germany</td>\n",
              "      <td>Japan</td>\n",
              "      <td>1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>1.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Hansi Flick</td>\n",
              "      <td>Manuel Neuer</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['67&amp;rsquor;|1:0|Jonas Hofmann|for Thomas Müll...</td>\n",
              "      <td>['46&amp;rsquor;|1:0|Takehiro Tomiyasu|for Takefus...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Belgium</td>\n",
              "      <td>1</td>\n",
              "      <td>2.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Miranda</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['85&amp;rsquor;|1:2|Fernandinho', '90&amp;rsquor;|1:2...</td>\n",
              "      <td>['47&amp;rsquor;|0:2|Toby Alderweireld', '71&amp;rsquo...</td>\n",
              "      <td>['46&amp;rsquor;|0:2|Roberto Firmino|for Willian',...</td>\n",
              "      <td>['83&amp;rsquor;|1:2|Thomas Vermaelen|for Nacer Ch...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>2</td>\n",
              "      <td>2.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['43&amp;rsquor;|0:0|Filipe Luís', '59&amp;rsquor;|1:0...</td>\n",
              "      <td>['38&amp;rsquor;|0:0|Edson Álvarez', '55&amp;rsquor;|1...</td>\n",
              "      <td>['80&amp;rsquor;|1:0|Fernandinho|for Paulinho', '8...</td>\n",
              "      <td>['46&amp;rsquor;|0:0|Miguel Layún|for Rafael Márqu...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>England</td>\n",
              "      <td>Panama</td>\n",
              "      <td>6</td>\n",
              "      <td>2.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Gareth Southgate</td>\n",
              "      <td>Harry Kane</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['23&amp;rsquor;|2:0|Ruben Loftus-Cheek']</td>\n",
              "      <td>['10&amp;rsquor;|1:0|Armando Cooper', '44&amp;rsquor;|...</td>\n",
              "      <td>['63&amp;rsquor;|6:0|Jamie Vardy|for Harry Kane', ...</td>\n",
              "      <td>['62&amp;rsquor;|5:0|Ricardo Ávila|for Aníbal Godo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Costa Rica</td>\n",
              "      <td>2</td>\n",
              "      <td>2.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['81&amp;rsquor;|0:0|Philippe Coutinho', '81&amp;rsquo...</td>\n",
              "      <td>['84&amp;rsquor;|0:0|Johnny Acosta']</td>\n",
              "      <td>['46&amp;rsquor;|0:0|Douglas Costa|for Willian', '...</td>\n",
              "      <td>['54&amp;rsquor;|0:0|Christian Bolaños|for Marco U...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d69cb36-4744-4e1f-adb9-e016aafd94b4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8d69cb36-4744-4e1f-adb9-e016aafd94b4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8d69cb36-4744-4e1f-adb9-e016aafd94b4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8196bffe-80eb-42e2-8662-d937178e52c2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8196bffe-80eb-42e2-8662-d937178e52c2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8196bffe-80eb-42e2-8662-d937178e52c2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_13346a3a-4f1e-4ffa-991f-728b0289d694\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df3')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_13346a3a-4f1e-4ffa-991f-728b0289d694 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df3');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df3"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot as plt"
      ],
      "metadata": {
        "id": "W7wdcHQYkcJE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot(x='home_team',y='home_xg',kind='bar')\n",
        "plt.xlabel('Home Team')\n",
        "plt.ylabel('Home XG')\n",
        "plt.title('Home Team estimated goals')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "tNmsaBAIgl3t",
        "outputId": "3e00b4fb-f44e-4ae3-89f1-290d82144077"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAH9CAYAAADms13hAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAATjlJREFUeJzt3XlcFuX+//H3DSoomzugImgaifuSilYuaaik0qLZckAz06Nm5VJxTm5ZYZlaJ3PpmGGWZZmalaZmLl+Tct/3FS1BSwElV5jfH/24T3dwIygwN+Pr+XjM43hfs9yfuZgOb2aumbEZhmEIAADAItzMLgAAAKAgEW4AAIClEG4AAIClEG4AAIClEG4AAIClEG4AAIClEG4AAIClEG4AAIClEG4AAIClEG4A3NJWr14tm82m1atXm11Kgerdu7dCQkLMLiNXNptNY8aMMbsMWBDhBre0+Ph42Ww2bdq0Kcf5bdu2Vb169Yq4qpvTu3dv2Wy26069e/c2u9QiNXXqVMXHx5tdhoM9e/ZozJgxOnbsmNmlAJZSwuwCABSs/v37q0OHDvbPR48e1ahRo/T000/r7rvvtrffdtttZpRnmqlTp6pixYrZQt0999yjixcvqlSpUkVe0549ezR27Fi1bdvW5c+yAMUJ4QawmPDwcIWHh9s/b9q0SaNGjVJ4eLieeOIJEytzTW5ubvL09DS7DAAFiMtSQD5du3ZN48aN02233SYPDw+FhIToX//6ly5fvuywXEhIiO6//36tXr1azZo1U+nSpVW/fn372I4FCxaofv368vT0VNOmTbV169Zs37Vv3z49/PDDKl++vDw9PdWsWTMtXry4QPbj559/VqdOneTn56cyZcqoTZs2+vHHHx2WOX78uAYOHKjQ0FCVLl1aFSpUUI8ePbJdRsm6vLdu3ToNGTJElSpVUtmyZdW/f39duXJFKSkpio6OVrly5VSuXDm98MILMgwjT3UuXbpUd999t7y8vOTj46PIyEjt3r3bYZmkpCT16dNH1apVk4eHhwIDA9W9e3d7nSEhIdq9e7fWrFljvyzXtm1bSTmPucm6HLljxw61adNGZcqUUa1atTR//nxJ0po1a9SiRQuVLl1aoaGh+v777/Pdb/Hx8erRo4ckqV27dva6/lpHXvZdkhYtWqR69erJ09NT9erV08KFC/PUt5KUmZmpMWPGqEqVKipTpozatWunPXv2KCQkJNtZriNHjqhHjx4qX768ypQpo5YtW+rbb791WObKlSsaNWqUmjZtKj8/P3l5eenuu+/WqlWrrlvL+fPn9dxzzykkJEQeHh6qXLmyOnbsqC1btuR5fwCJcANIklJTU/Xbb79lm65evZpt2aeeekqjRo1SkyZNNHnyZLVp00ZxcXHq1atXtmUPHTqkxx57TF27dlVcXJzOnTunrl276pNPPtHzzz+vJ554QmPHjtXhw4fVs2dPZWZm2tfdvXu3WrZsqb179+qll17SxIkT5eXlpaioqHz98srJDz/8oHvuuUdpaWkaPXq0Xn/9daWkpKh9+/basGGDfbmNGzdq/fr16tWrl/7zn/9owIABWrlypdq2bas//vgj23afeeYZHTx4UGPHjlW3bt30/vvva+TIkeratasyMjL0+uuv66677tKECRM0Z86c69Y5Z84cRUZGytvbW2+88YZGjhypPXv26K677nIICg899JAWLlyoPn36aOrUqRoyZIjOnz+vxMRESdLbb7+tatWq6Y477tCcOXM0Z84c/fvf/871u8+dO6f7779fLVq00JtvvikPDw/16tVL8+bNU69evdSlSxeNHz9e6enpevjhh3X+/Pl89ds999yjIUOGSJL+9a9/2euqU6dOvvZ9+fLleuihh2Sz2RQXF6eoqCj16dPH6Tiyv4uNjdXYsWPVrFkzTZgwQbVr11ZERITS09MdlktOTlarVq20bNkyDRw4UK+99pouXbqkbt26ORyPaWlpmjlzptq2bas33nhDY8aM0ZkzZxQREaFt27blWsuAAQM0bdo0PfTQQ5o6daqGDx+u0qVLa+/evXnaF8DOAG5hH374oSEp16lu3br25bdt22ZIMp566imH7QwfPtyQZPzwww/2tuDgYEOSsX79envbsmXLDElG6dKljePHj9vbZ8yYYUgyVq1aZW+79957jfr16xuXLl2yt2VmZhqtWrUyateuned93LhxoyHJ+PDDD+3bqF27thEREWFkZmbal/vjjz+MGjVqGB07dnRo+7uEhARDkvHRRx/Z27L68e/bDA8PN2w2mzFgwAB727Vr14xq1aoZbdq0ybXu8+fPG2XLljX69evn0J6UlGT4+fnZ28+dO2dIMiZMmJDr9urWrZvjd65atSpb37dp08aQZMydO9fetm/fPkOS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TJIUHR2tqlWrKi4uTpL0yiuvqGXLlqpVq5ZSUlI0YcIEHT9+XE899ZSZuwEAcAGlSpWSm5ubfv31V1WqVEmlSpUq9IfFoeAYhqEzZ87k+NqI/DI13Jw+fVrR0dE6deqU/Pz81KBBAy1btkwdO3aUJCUmJjq88OvcuXPq16+fkpKSVK5cOTVt2lTr16+/qcdPAwCswc3NTTVq1NCpU6f066+/ml0OboDNZlO1atXk7u5+c9sx8yF+ZuAhfkWDh/gBMIthGLp27ZoyMjLMLgX5VLJkSafBptg8xA8AgIKWdVnjZi9toPhyuQHFAAAAN4NwAwAALIVwAwAALIVwAwAALIVwAwAALIVwAwAALIVwAwAALIVwAwAALIVwAwAALIVwAwAALIVwAwAALIVwAwAALIUXZ94E3nwNAIDr4cwNAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwlBJmFwDcakJe+tbsEuyOjY80uwQAKHCcuQEAAJZCuAEAAJZCuAEAAJZCuAEAAJZiariZNm2aGjRoIF9fX/n6+io8PFxLly7NdZ0vvvhCd9xxhzw9PVW/fn0tWbKkiKoFAADFganhplq1aho/frw2b96sTZs2qX379urevbt2796d4/Lr16/Xo48+qr59+2rr1q2KiopSVFSUdu3aVcSVAwAAV2VquOnatau6dOmi2rVr6/bbb9drr70mb29v/fTTTzku/84776hTp04aMWKE6tSpo3HjxqlJkyaaMmVKEVcOAABclcuMucnIyNBnn32m9PR0hYeH57hMQkKCOnTo4NAWERGhhISEoigRAAAUA6Y/xG/nzp0KDw/XpUuX5O3trYULFyosLCzHZZOSkuTv7+/Q5u/vr6SkJKfbv3z5si5fvmz/nJaWVjCFAwAAl2T6mZvQ0FBt27ZNP//8s/75z38qJiZGe/bsKbDtx8XFyc/Pzz4FBQUV2LYBAIDrMT3clCpVSrVq1VLTpk0VFxenhg0b6p133slx2YCAACUnJzu0JScnKyAgwOn2Y2NjlZqaap9OnDhRoPUDAADXYnq4+bvMzEyHy0h/FR4erpUrVzq0rVixwukYHUny8PCw32qeNQEAAOsydcxNbGysOnfurOrVq+v8+fOaO3euVq9erWXLlkmSoqOjVbVqVcXFxUmSnn32WbVp00YTJ05UZGSkPvvsM23atEnvv/++mbsBAABciKnh5vTp04qOjtapU6fk5+enBg0aaNmyZerYsaMkKTExUW5u/zu51KpVK82dO1cvv/yy/vWvf6l27dpatGiR6tWrZ9YuAAAAF2NquPnggw9ynb969epsbT169FCPHj0KqSIAAFDcudyYGwAAgJtBuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZCuAEAAJZi6lvBAeCvQl761uwS7I6NjzS7BOSBKx0zEseNq+DMDQAAsBTCDQAAsBTCDQAAsBTCDQAAsBTCDQAAsBTCDQAAsBTCDQAAsBTCDQAAsBTCDQAAsBSeUAwALo6n8AL5w5kbAABgKYQbAABgKYQbAABgKYQbAABgKYQbAABgKYQbAABgKYQbAABgKYQbAABgKYQbAABgKTyhGAAAC7qVn2zNmRsAAGAphBsAAGAphBsAAGAphBsAAGAppoabuLg43XnnnfLx8VHlypUVFRWl/fv357pOfHy8bDabw+Tp6VlEFQMAAFdnarhZs2aNBg0apJ9++kkrVqzQ1atXdd999yk9PT3X9Xx9fXXq1Cn7dPz48SKqGAAAuDpTbwX/7rvvHD7Hx8ercuXK2rx5s+655x6n69lsNgUEBBR2eQAAoBhyqTE3qampkqTy5cvnutyFCxcUHBysoKAgde/eXbt373a67OXLl5WWluYwAQAA63KZcJOZmannnntOrVu3Vr169ZwuFxoaqlmzZumrr77Sxx9/rMzMTLVq1UonT57Mcfm4uDj5+fnZp6CgoMLaBQAA4AJcJtwMGjRIu3bt0meffZbrcuHh4YqOjlajRo3Upk0bLViwQJUqVdKMGTNyXD42Nlapqan26cSJE4VRPgAAcBEu8fqFwYMH65tvvtHatWtVrVq1fK1bsmRJNW7cWIcOHcpxvoeHhzw8PAqiTAAAUAyYeubGMAwNHjxYCxcu1A8//KAaNWrkexsZGRnauXOnAgMDC6FCAABQ3Jh65mbQoEGaO3euvvrqK/n4+CgpKUmS5Ofnp9KlS0uSoqOjVbVqVcXFxUmSXnnlFbVs2VK1atVSSkqKJkyYoOPHj+upp54ybT8AAIDrMDXcTJs2TZLUtm1bh/YPP/xQvXv3liQlJibKze1/J5jOnTunfv36KSkpSeXKlVPTpk21fv16hYWFFVXZAADAhZkabgzDuO4yq1evdvg8efJkTZ48uZAqAgAAxZ3L3C0FAABQEAg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUgg3AADAUkrkZ+G0tDT5+vpKkpYsWaJr167Z57m7uysyMrJgqwMAAMinPIebb775RiNHjtTWrVslSY888ojS09Pt8202m+bNm6eHH3644KsEAADIozxflnr//ff1zDPPOLQdOnRImZmZyszMVFxcnGbNmlXgBQIAAORHnsPNzp071bp1a6fzO3furE2bNhVIUQAAADcqz+Hm1KlT8vDwsH9etWqVgoKC7J+9vb2VmppasNUBAADkU57DTfny5XXo0CH752bNmqlkyZL2zwcPHlT58uULtjoAAIB8ynO4ueeee/Sf//zH6fz//Oc/uueeewqkKAAAgBuV53Dz4osvavny5erRo4c2btyo1NRUpaamasOGDXrooYf0/fff68UXXyzMWgEAAK4rz7eCN27cWPPmzdNTTz2lBQsWOMwrV66cPvvsMzVp0qTACwQAAMiPfD3Er3v37urYsaOWLVumgwcPSpJq166t++67T15eXoVSIAAAQH7kK9xIUpkyZfTAAw/kOO/s2bMMKgYAAKbK85ibtm3b6tixY07nL1iwQHXr1i2ImgAAAG5YnsONj4+PGjRooBkzZji0nz17Vr169dLjjz+uIUOGFHiBAAAA+ZHncPP111/r7bff1osvvqhOnTrp5MmTWrhwocLCwnTo0CFt3LhRsbGxhVkrAADAdeU53EjSk08+qR07dujSpUu6/fbb9eijj2rQoEH6+eefVa9evcKqEQAAIM/yFW4kad++fTp8+LAqVaokwzDk5uYmm81WGLUBAADkW57DTXp6up5++ml17dpVTz31lA4fPqyFCxdq2rRpatGihfbu3ZvvL4+Li9Odd94pHx8fVa5cWVFRUdq/f/911/viiy90xx13yNPTU/Xr19eSJUvy/d0AAMCa8hxu6tWrp59++kkJCQkaPXq0SpQooS5dumjXrl0KDQ1VkyZN9MYbb+Try9esWaNBgwbpp59+0ooVK3T16lXdd999Sk9Pd7rO+vXr9eijj6pv377aunWroqKiFBUVpV27duXruwEAgDXlOdw88sgj2rRpU7anEJctW1Yff/yx5s6dq8mTJ+fry7/77jv17t1bdevWVcOGDRUfH6/ExERt3rzZ6TrvvPOOOnXqpBEjRqhOnToaN26cmjRpoilTpuTruwEAgDXlOdyMHz9epUqVcjr/gQce0O7du2+qmNTUVEnK9UGACQkJ6tChg0NbRESEEhISclz+8uXLSktLc5gAAIB15XtAcW4qVKhww+tmZmbqueeeU+vWrXO98yopKUn+/v4Obf7+/kpKSspx+bi4OPn5+dmnoKCgG64RAAC4vgINNzdj0KBB2rVrlz777LMC3W5sbKz9Deapqak6ceJEgW4fAAC4lny/W6owDB48WN98843Wrl2ratWq5bpsQECAkpOTHdqSk5MVEBCQ4/IeHh7y8PAosFoBAIBrM/XMjWEYGjx4sBYuXKgffvhBNWrUuO464eHhWrlypUPbihUrFB4eXlhlAgCAYuSGw82VK1e0f/9+Xbt27Ya/fNCgQfY7rXx8fJSUlKSkpCRdvHjRvkx0dLTDax2effZZfffdd5o4caL27dunMWPGaNOmTRo8ePAN1wEAAKwj3+Hmjz/+UN++fVWmTBnVrVtXiYmJkqRnnnlG48ePz9e2pk2bptTUVLVt21aBgYH2ad68efZlEhMTderUKfvnVq1aae7cuXr//ffVsGFDzZ8/X4sWLeL1DwAAQNINjLmJjY3V9u3btXr1anXq1Mne3qFDB40ZM0YvvfRSnrdlGMZ1l1m9enW2th49eqhHjx55/h4AAHDryHe4WbRokebNm6eWLVs6vFOqbt26Onz4cIEWBwAAkF/5vix15swZVa5cOVt7eno6L9AEAACmy3e4adasmb799lv756xAM3PmTO5YAgAApsv3ZanXX39dnTt31p49e3Tt2jW988472rNnj9avX681a9YURo0AAAB5lu8zN3fddZe2bduma9euqX79+lq+fLkqV66shIQENW3atDBqBAAAyLMbekLxbbfdpv/+978FXQsAAMBNu+HXL5w+fVqnT59WZmamQ3uDBg1uuigAAIAble9ws3nzZsXExGjv3r3ZnlNjs9mUkZFRYMUBAADkV77DzZNPPqnbb79dH3zwgfz9/bn9GwAAuJR8h5sjR47oyy+/VK1atQqjHgAAgJuS77ul7r33Xm3fvr0wagEAALhp+T5zM3PmTMXExGjXrl2qV6+eSpYs6TC/W7duBVYcAABAfuU73CQkJOjHH3/U0qVLs81jQDEAADBbvi9LPfPMM3riiSd06tQpZWZmOkwEGwAAYLZ8h5vff/9dzz//vPz9/QujHgAAgJuS73Dz4IMPatWqVYVRCwAAwE3L95ib22+/XbGxsVq3bp3q16+fbUDxkCFDCqw4AACA/Lqhu6W8vb21Zs2abG8Bt9lshBsAAGCqfIebo0ePFkYdAAAABSLfY27+yjCMbO+XAgAAMNMNhZuPPvpI9evXV+nSpVW6dGk1aNBAc+bMKejaAAAA8i3fl6UmTZqkkSNHavDgwWrdurUkad26dRowYIB+++03Pf/88wVeJAAAQF7lO9y8++67mjZtmqKjo+1t3bp1U926dTVmzBjCDQAAMFW+L0udOnVKrVq1ytbeqlUrnTp1qkCKAgAAuFH5Dje1atXS559/nq193rx5ql27doEUBQAAcKPyfVlq7NixeuSRR7R27Vr7mJsff/xRK1euzDH0AAAAFKV8n7l56KGH9PPPP6tixYpatGiRFi1apIoVK2rDhg164IEHCqNGAACAPMv3mRtJatq0qT7++OOCrgUAAOCm5TncpKWl5Wk5X1/fGy4GAADgZuU53JQtW1Y2m83pfMMwZLPZlJGRUSCFAQAA3Ig8h5tVq1bZ/20Yhrp06aKZM2eqatWqhVIYAADAjchzuGnTpo3DZ3d3d7Vs2VI1a9Ys8KIAAABu1E29OBMAAMDVEG4AAICl3FS4yW2AMQAAgBnyPObmwQcfdPh86dIlDRgwQF5eXg7tCxYsKJjKAAAAbkCew42fn5/D5yeeeKLAiwEAALhZeQ43H374YWHWAQAAUCBMHVC8du1ade3aVVWqVJHNZtOiRYtyXX716tWy2WzZpqSkpKIpGAAAuDxTw016eroaNmyo9957L1/r7d+/X6dOnbJPlStXLqQKAQBAcXNDL84sKJ07d1bnzp3zvV7lypVVtmzZgi8IAAAUe8XyOTeNGjVSYGCgOnbsqB9//DHXZS9fvqy0tDSHCQAAWFexCjeBgYGaPn26vvzyS3355ZcKCgpS27ZttWXLFqfrxMXFyc/Pzz4FBQUVYcUAAKComXpZKr9CQ0MVGhpq/9yqVSsdPnxYkydP1pw5c3JcJzY2VkOHDrV/TktLI+AAAGBhxSrc5KR58+Zat26d0/keHh7y8PAowooAAICZitVlqZxs27ZNgYGBZpcBAABchKlnbi5cuKBDhw7ZPx89elTbtm1T+fLlVb16dcXGxuqXX37RRx99JEl6++23VaNGDdWtW1eXLl3SzJkz9cMPP2j58uVm7QIAAHAxpoabTZs2qV27dvbPWWNjYmJiFB8fr1OnTikxMdE+/8qVKxo2bJh++eUXlSlTRg0aNND333/vsA0AAHBrMzXctG3bVoZhOJ0fHx/v8PmFF17QCy+8UMhVAQCA4qzYj7kBAAD4K8INAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFMINAACwFFPDzdq1a9W1a1dVqVJFNptNixYtuu46q1evVpMmTeTh4aFatWopPj6+0OsEAADFh6nhJj09XQ0bNtR7772Xp+WPHj2qyMhItWvXTtu2bdNzzz2np556SsuWLSvkSgEAQHFRwswv79y5szp37pzn5adPn64aNWpo4sSJkqQ6depo3bp1mjx5siIiIgqrTAAAUIwUqzE3CQkJ6tChg0NbRESEEhISnK5z+fJlpaWlOUwAAMC6ilW4SUpKkr+/v0Obv7+/0tLSdPHixRzXiYuLk5+fn30KCgoqilIBAIBJilW4uRGxsbFKTU21TydOnDC7JAAAUIhMHXOTXwEBAUpOTnZoS05Olq+vr0qXLp3jOh4eHvLw8CiK8gAAgAsoVmduwsPDtXLlSoe2FStWKDw83KSKAACAqzE13Fy4cEHbtm3Ttm3bJP15q/e2bduUmJgo6c9LStHR0fblBwwY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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "fBBT4g9ngluo",
        "outputId": "f71abba6-d139-4ae7-d481-43099791f699"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     home_team       away_team  home_score  home_xg  home_penalty  away_score  \\\n",
              "0    Argentina          France           3      3.3           4.0           3   \n",
              "11      Brazil  Korea Republic           4      3.6           NaN           1   \n",
              "53     Germany           Japan           1      3.1           NaN           2   \n",
              "71      Brazil         Belgium           1      2.8           NaN           2   \n",
              "74      Brazil          Mexico           2      2.7           NaN           0   \n",
              "96     England          Panama           6      2.8           NaN           1   \n",
              "102     Brazil      Costa Rica           2      2.6           NaN           0   \n",
              "\n",
              "     away_xg  away_penalty      home_manager  home_captain  ...  \\\n",
              "0        2.2           2.0    Lionel Scaloni  Lionel Messi  ...   \n",
              "11       0.5           NaN              Tite  Thiago Silva  ...   \n",
              "53       1.5           NaN       Hansi Flick  Manuel Neuer  ...   \n",
              "71       0.5           NaN              Tite       Miranda  ...   \n",
              "74       0.7           NaN              Tite  Thiago Silva  ...   \n",
              "96       1.1           NaN  Gareth Southgate    Harry Kane  ...   \n",
              "102      0.1           NaN              Tite  Thiago Silva  ...   \n",
              "\n",
              "    home_penalty_shootout_miss_long  \\\n",
              "0                               NaN   \n",
              "11                              NaN   \n",
              "53                              NaN   \n",
              "71                              NaN   \n",
              "74                              NaN   \n",
              "96                              NaN   \n",
              "102                             NaN   \n",
              "\n",
              "                       away_penalty_shootout_miss_long  home_red_card  \\\n",
              "0    ['3|1:1|Kingsley Coman', '5|2:1|Aurélien Tchou...            NaN   \n",
              "11                                                 NaN            NaN   \n",
              "53                                                 NaN            NaN   \n",
              "71                                                 NaN            NaN   \n",
              "74                                                 NaN            NaN   \n",
              "96                                                 NaN            NaN   \n",
              "102                                                NaN            NaN   \n",
              "\n",
              "    away_red_card home_yellow_red_card away_yellow_red_card  \\\n",
              "0             NaN                  NaN                  NaN   \n",
              "11            NaN                  NaN                  NaN   \n",
              "53            NaN                  NaN                  NaN   \n",
              "71            NaN                  NaN                  NaN   \n",
              "74            NaN                  NaN                  NaN   \n",
              "96            NaN                  NaN                  NaN   \n",
              "102           NaN                  NaN                  NaN   \n",
              "\n",
              "                                 home_yellow_card_long  \\\n",
              "0    ['45+7&rsquor;|2:0|Enzo Fernández', '90+8&rsqu...   \n",
              "11                                                 NaN   \n",
              "53                                                 NaN   \n",
              "71   ['85&rsquor;|1:2|Fernandinho', '90&rsquor;|1:2...   \n",
              "74   ['43&rsquor;|0:0|Filipe Luís', '59&rsquor;|1:0...   \n",
              "96               ['23&rsquor;|2:0|Ruben Loftus-Cheek']   \n",
              "102  ['81&rsquor;|0:0|Philippe Coutinho', '81&rsquo...   \n",
              "\n",
              "                                 away_yellow_card_long  \\\n",
              "0    ['55&rsquor;|2:0|Adrien Rabiot', '87&rsquor;|2...   \n",
              "11                   ['44&rsquor;|4:0|Jung Woo-young']   \n",
              "53                                                 NaN   \n",
              "71   ['47&rsquor;|0:2|Toby Alderweireld', '71&rsquo...   \n",
              "74   ['38&rsquor;|0:0|Edson Álvarez', '55&rsquor;|1...   \n",
              "96   ['10&rsquor;|1:0|Armando Cooper', '44&rsquor;|...   \n",
              "102                   ['84&rsquor;|0:0|Johnny Acosta']   \n",
              "\n",
              "                               home_substitute_in_long  \\\n",
              "0    ['64&rsquor;|2:0|Marcos Acuña|for Ángel Di Mar...   \n",
              "11   ['63&rsquor;|4:0|Dani Alves|for Éder Militão',...   \n",
              "53   ['67&rsquor;|1:0|Jonas Hofmann|for Thomas Müll...   \n",
              "71   ['46&rsquor;|0:2|Roberto Firmino|for Willian',...   \n",
              "74   ['80&rsquor;|1:0|Fernandinho|for Paulinho', '8...   \n",
              "96   ['63&rsquor;|6:0|Jamie Vardy|for Harry Kane', ...   \n",
              "102  ['46&rsquor;|0:0|Douglas Costa|for Willian', '...   \n",
              "\n",
              "                               away_substitute_in_long  \n",
              "0    ['41&rsquor;|2:0|Randal Kolo Muani|for Ousmane...  \n",
              "11   ['46&rsquor;|4:0|Hong Chul|for Kim Jin-su', '4...  \n",
              "53   ['46&rsquor;|1:0|Takehiro Tomiyasu|for Takefus...  \n",
              "71   ['83&rsquor;|1:2|Thomas Vermaelen|for Nacer Ch...  \n",
              "74   ['46&rsquor;|0:0|Miguel Layún|for Rafael Márqu...  \n",
              "96   ['62&rsquor;|5:0|Ricardo Ávila|for Aníbal Godo...  \n",
              "102  ['54&rsquor;|0:0|Christian Bolaños|for Marco U...  \n",
              "\n",
              "[7 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-99bc908f-f4ba-43f2-be5a-1bb65e1d2be1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_team</th>\n",
              "      <th>away_team</th>\n",
              "      <th>home_score</th>\n",
              "      <th>home_xg</th>\n",
              "      <th>home_penalty</th>\n",
              "      <th>away_score</th>\n",
              "      <th>away_xg</th>\n",
              "      <th>away_penalty</th>\n",
              "      <th>home_manager</th>\n",
              "      <th>home_captain</th>\n",
              "      <th>...</th>\n",
              "      <th>home_penalty_shootout_miss_long</th>\n",
              "      <th>away_penalty_shootout_miss_long</th>\n",
              "      <th>home_red_card</th>\n",
              "      <th>away_red_card</th>\n",
              "      <th>home_yellow_red_card</th>\n",
              "      <th>away_yellow_red_card</th>\n",
              "      <th>home_yellow_card_long</th>\n",
              "      <th>away_yellow_card_long</th>\n",
              "      <th>home_substitute_in_long</th>\n",
              "      <th>away_substitute_in_long</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>France</td>\n",
              "      <td>3</td>\n",
              "      <td>3.3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Lionel Scaloni</td>\n",
              "      <td>Lionel Messi</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['3|1:1|Kingsley Coman', '5|2:1|Aurélien Tchou...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['45+7&amp;rsquor;|2:0|Enzo Fernández', '90+8&amp;rsqu...</td>\n",
              "      <td>['55&amp;rsquor;|2:0|Adrien Rabiot', '87&amp;rsquor;|2...</td>\n",
              "      <td>['64&amp;rsquor;|2:0|Marcos Acuña|for Ángel Di Mar...</td>\n",
              "      <td>['41&amp;rsquor;|2:0|Randal Kolo Muani|for Ousmane...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Korea Republic</td>\n",
              "      <td>4</td>\n",
              "      <td>3.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['44&amp;rsquor;|4:0|Jung Woo-young']</td>\n",
              "      <td>['63&amp;rsquor;|4:0|Dani Alves|for Éder Militão',...</td>\n",
              "      <td>['46&amp;rsquor;|4:0|Hong Chul|for Kim Jin-su', '4...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>Germany</td>\n",
              "      <td>Japan</td>\n",
              "      <td>1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>1.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Hansi Flick</td>\n",
              "      <td>Manuel Neuer</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['67&amp;rsquor;|1:0|Jonas Hofmann|for Thomas Müll...</td>\n",
              "      <td>['46&amp;rsquor;|1:0|Takehiro Tomiyasu|for Takefus...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Belgium</td>\n",
              "      <td>1</td>\n",
              "      <td>2.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>0.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Miranda</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['85&amp;rsquor;|1:2|Fernandinho', '90&amp;rsquor;|1:2...</td>\n",
              "      <td>['47&amp;rsquor;|0:2|Toby Alderweireld', '71&amp;rsquo...</td>\n",
              "      <td>['46&amp;rsquor;|0:2|Roberto Firmino|for Willian',...</td>\n",
              "      <td>['83&amp;rsquor;|1:2|Thomas Vermaelen|for Nacer Ch...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>2</td>\n",
              "      <td>2.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['43&amp;rsquor;|0:0|Filipe Luís', '59&amp;rsquor;|1:0...</td>\n",
              "      <td>['38&amp;rsquor;|0:0|Edson Álvarez', '55&amp;rsquor;|1...</td>\n",
              "      <td>['80&amp;rsquor;|1:0|Fernandinho|for Paulinho', '8...</td>\n",
              "      <td>['46&amp;rsquor;|0:0|Miguel Layún|for Rafael Márqu...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>England</td>\n",
              "      <td>Panama</td>\n",
              "      <td>6</td>\n",
              "      <td>2.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Gareth Southgate</td>\n",
              "      <td>Harry Kane</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['23&amp;rsquor;|2:0|Ruben Loftus-Cheek']</td>\n",
              "      <td>['10&amp;rsquor;|1:0|Armando Cooper', '44&amp;rsquor;|...</td>\n",
              "      <td>['63&amp;rsquor;|6:0|Jamie Vardy|for Harry Kane', ...</td>\n",
              "      <td>['62&amp;rsquor;|5:0|Ricardo Ávila|for Aníbal Godo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>Costa Rica</td>\n",
              "      <td>2</td>\n",
              "      <td>2.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tite</td>\n",
              "      <td>Thiago Silva</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>['81&amp;rsquor;|0:0|Philippe Coutinho', '81&amp;rsquo...</td>\n",
              "      <td>['84&amp;rsquor;|0:0|Johnny Acosta']</td>\n",
              "      <td>['46&amp;rsquor;|0:0|Douglas Costa|for Willian', '...</td>\n",
              "      <td>['54&amp;rsquor;|0:0|Christian Bolaños|for Marco U...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99bc908f-f4ba-43f2-be5a-1bb65e1d2be1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-99bc908f-f4ba-43f2-be5a-1bb65e1d2be1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-99bc908f-f4ba-43f2-be5a-1bb65e1d2be1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2666e669-fb22-42f1-9338-d2c8e0872489\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2666e669-fb22-42f1-9338-d2c8e0872489')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2666e669-fb22-42f1-9338-d2c8e0872489 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f8674529-9d9d-4efb-aa98-4ab95cea61ad\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df3')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f8674529-9d9d-4efb-aa98-4ab95cea61ad button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df3');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df3"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot(x=\"home_team\",y= ['home_score','home_xg'],kind=\"bar\",color=[\"red\",\"gold\"])\n",
        "plt.xlabel(\"Home Team\")\n",
        "plt.ylabel(\"Home XG\")\n",
        "plt.title(\"Home Team estimated goals\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "njlbHB2QlnNS",
        "outputId": "d84d6c30-109a-4503-8578-9ceff5f9866d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# grouphy\n",
        "df4 = df.groupby(\"home_team\")"
      ],
      "metadata": {
        "id": "BJzOlqGPojrQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df4.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "collapsed": true,
        "id": "xHDYrvRMo-Ji",
        "outputId": "ea6ae71a-7f88-4272-f195-68396fda330c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "agg function failed [how->mean,dtype->object]",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m_agg_py_fallback\u001b[0;34m(self, how, values, ndim, alt)\u001b[0m\n\u001b[1;32m   1941\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1942\u001b[0;31m             \u001b[0mres_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_grouper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0magg_series\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mser\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpreserve_dtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1943\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/groupby/ops.py\u001b[0m in \u001b[0;36magg_series\u001b[0;34m(self, obj, func, preserve_dtype)\u001b[0m\n\u001b[1;32m    863\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 864\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_aggregate_series_pure_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/groupby/ops.py\u001b[0m in \u001b[0;36m_aggregate_series_pure_python\u001b[0;34m(self, obj, func)\u001b[0m\n\u001b[1;32m    884\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msplitter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 885\u001b[0;31m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    886\u001b[0m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextract_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m   2453\u001b[0m                 \u001b[0;34m\"mean\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2454\u001b[0;31m                 \u001b[0malt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSeries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumeric_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnumeric_only\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2455\u001b[0m                 \u001b[0mnumeric_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnumeric_only\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36mmean\u001b[0;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[1;32m   6548\u001b[0m     ):\n\u001b[0;32m-> 6549\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mNDFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mmean\u001b[0;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[1;32m  12419\u001b[0m     ) -> Series | float:\n\u001b[0;32m> 12420\u001b[0;31m         return self._stat_function(\n\u001b[0m\u001b[1;32m  12421\u001b[0m             \u001b[0;34m\"mean\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnanops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanmean\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_stat_function\u001b[0;34m(self, name, func, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[1;32m  12376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m> 12377\u001b[0;31m         return self._reduce(\n\u001b[0m\u001b[1;32m  12378\u001b[0m             \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnumeric_only\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_reduce\u001b[0;34m(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)\u001b[0m\n\u001b[1;32m   6456\u001b[0m                 )\n\u001b[0;32m-> 6457\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdelegate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6458\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36mf\u001b[0;34m(values, axis, skipna, **kwds)\u001b[0m\n\u001b[1;32m    146\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 147\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0malt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36mnew_func\u001b[0;34m(values, axis, skipna, mask, **kwargs)\u001b[0m\n\u001b[1;32m    403\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 404\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    405\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36mnanmean\u001b[0;34m(values, axis, skipna, mask)\u001b[0m\n\u001b[1;32m    719\u001b[0m     \u001b[0mthe_sum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype_sum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 720\u001b[0;31m     \u001b[0mthe_sum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_ensure_numeric\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthe_sum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    721\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36m_ensure_numeric\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m   1700\u001b[0m             \u001b[0;31m# GH#44008, GH#36703 avoid casting e.g. strings to numeric\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1701\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Could not convert string '{x}' to numeric\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1702\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: Could not convert string 'RussiaSloveniaSpainNorthern IrelandChileAustria' to numeric",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-59-f5bc2b457cf4>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf4\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36mmean\u001b[0;34m(self, numeric_only, engine, engine_kwargs)\u001b[0m\n\u001b[1;32m   2450\u001b[0m             )\n\u001b[1;32m   2451\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2452\u001b[0;31m             result = self._cython_agg_general(\n\u001b[0m\u001b[1;32m   2453\u001b[0m                 \u001b[0;34m\"mean\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2454\u001b[0m                 \u001b[0malt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSeries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumeric_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnumeric_only\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m_cython_agg_general\u001b[0;34m(self, how, alt, numeric_only, min_count, **kwargs)\u001b[0m\n\u001b[1;32m   1996\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1997\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1998\u001b[0;31m         \u001b[0mnew_mgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrouped_reduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1999\u001b[0m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wrap_agged_manager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_mgr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2000\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhow\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"idxmin\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"idxmax\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mgrouped_reduce\u001b[0;34m(self, func)\u001b[0m\n\u001b[1;32m   1467\u001b[0m                 \u001b[0;31m#  while others do not.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1468\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0msb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1469\u001b[0;31m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1470\u001b[0m                     \u001b[0mresult_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapplied\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, **kwargs)\u001b[0m\n\u001b[1;32m    391\u001b[0m         \u001b[0mone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m         \"\"\"\n\u001b[0;32m--> 393\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36marray_func\u001b[0;34m(values)\u001b[0m\n\u001b[1;32m   1993\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1994\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0malt\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1995\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_agg_py_fallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1996\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1997\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m_agg_py_fallback\u001b[0;34m(self, how, values, ndim, alt)\u001b[0m\n\u001b[1;32m   1944\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"agg function failed [how->{how},dtype->{ser.dtype}]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1945\u001b[0m             \u001b[0;31m# preserve the kind of exception that raised\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1946\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1948\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: agg function failed [how->mean,dtype->object]"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby(\"home_team\")[\"home_score\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lnzczFbepzki",
        "outputId": "c1b27800-208b-49f1-ef21-19883017a3db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f5b0c84b690>"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby(\"home_team\")[\"home_score\"].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "collapsed": true,
        "id": "aEwd4KSCpEEy",
        "outputId": "bf03306a-9676-4f86-da7a-00d181e1f772"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "home_team\n",
              "Algeria         0.833333\n",
              "Angola          0.000000\n",
              "Argentina       2.050847\n",
              "Australia       1.000000\n",
              "Austria         2.000000\n",
              "                  ...   \n",
              "Uruguay         2.060606\n",
              "Wales           0.666667\n",
              "West Germany    2.026316\n",
              "Yugoslavia      2.562500\n",
              "Zaire           0.000000\n",
              "Name: home_score, Length: 82, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_score</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home_team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Algeria</th>\n",
              "      <td>0.833333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angola</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Argentina</th>\n",
              "      <td>2.050847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Australia</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Austria</th>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Uruguay</th>\n",
              "      <td>2.060606</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Wales</th>\n",
              "      <td>0.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>West Germany</th>\n",
              "      <td>2.026316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yugoslavia</th>\n",
              "      <td>2.562500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Zaire</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>82 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "collapsed": true,
        "id": "T3KSTqYkqlJO",
        "outputId": "1b7ffe6a-61de-40c1-9530-ca3a6aed892e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       home_score     home_xg  home_penalty  away_score     away_xg  \\\n",
              "count  964.000000  128.000000     35.000000  964.000000  128.000000   \n",
              "mean     1.776971    1.435938      3.285714    1.044606    1.192187   \n",
              "std      1.596676    0.860391      1.226459    1.071233    0.809258   \n",
              "min      0.000000    0.100000      0.000000    0.000000    0.000000   \n",
              "25%      1.000000    0.800000      3.000000    0.000000    0.600000   \n",
              "50%      1.000000    1.300000      3.000000    1.000000    1.000000   \n",
              "75%      3.000000    1.925000      4.000000    2.000000    1.525000   \n",
              "max     10.000000    5.200000      5.000000    7.000000    5.700000   \n",
              "\n",
              "       away_penalty     Attendance         Year  \n",
              "count     35.000000     964.000000   964.000000  \n",
              "mean       3.057143   45693.374481  1989.244813  \n",
              "std        1.136115   22704.131689    24.014409  \n",
              "min        0.000000    2000.000000  1930.000000  \n",
              "25%        2.000000   31800.000000  1974.000000  \n",
              "50%        3.000000   42725.000000  1994.000000  \n",
              "75%        4.000000   60984.500000  2010.000000  \n",
              "max        5.000000  173850.000000  2022.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aeb33a49-ae97-44b5-8ae2-be51a60b0b66\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>home_score</th>\n",
              "      <th>home_xg</th>\n",
              "      <th>home_penalty</th>\n",
              "      <th>away_score</th>\n",
              "      <th>away_xg</th>\n",
              "      <th>away_penalty</th>\n",
              "      <th>Attendance</th>\n",
              "      <th>Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>964.000000</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>964.000000</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>964.000000</td>\n",
              "      <td>964.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.776971</td>\n",
              "      <td>1.435938</td>\n",
              "      <td>3.285714</td>\n",
              "      <td>1.044606</td>\n",
              "      <td>1.192187</td>\n",
              "      <td>3.057143</td>\n",
              "      <td>45693.374481</td>\n",
              "      <td>1989.244813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.596676</td>\n",
              "      <td>0.860391</td>\n",
              "      <td>1.226459</td>\n",
              "      <td>1.071233</td>\n",
              "      <td>0.809258</td>\n",
              "      <td>1.136115</td>\n",
              "      <td>22704.131689</td>\n",
              "      <td>24.014409</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2000.000000</td>\n",
              "      <td>1930.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>31800.000000</td>\n",
              "      <td>1974.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.300000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>42725.000000</td>\n",
              "      <td>1994.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.925000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.525000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>60984.500000</td>\n",
              "      <td>2010.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>10.000000</td>\n",
              "      <td>5.200000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>5.700000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>173850.000000</td>\n",
              "      <td>2022.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aeb33a49-ae97-44b5-8ae2-be51a60b0b66')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aeb33a49-ae97-44b5-8ae2-be51a60b0b66 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aeb33a49-ae97-44b5-8ae2-be51a60b0b66');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a7bb91ec-9783-46f5-8863-5a14a60a2a37\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7bb91ec-9783-46f5-8863-5a14a60a2a37')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a7bb91ec-9783-46f5-8863-5a14a60a2a37 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"home_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 339.911849731355,\n        \"min\": 0.0,\n        \"max\": 964.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          964.0,\n          1.7769709543568464,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"home_xg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44.6943962352742,\n        \"min\": 0.1,\n        \"max\": 128.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.4359375,\n          1.3,\n          128.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"home_penalty\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.494427162110764,\n        \"min\": 0.0,\n        \"max\": 35.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          35.0,\n          3.2857142857142856,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"away_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 340.22093080431114,\n        \"min\": 0.0,\n        \"max\": 964.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          964.0,\n          1.0446058091286308,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"away_xg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44.74236419440799,\n        \"min\": 0.0,\n        \"max\": 128.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.1921875,\n          1.0,\n          128.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"away_penalty\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.5631591664931,\n        \"min\": 0.0,\n        \"max\": 35.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.057142857142857,\n          3.0,\n          35.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55122.36797872059,\n        \"min\": 964.0,\n        \"max\": 173850.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          45693.3744813278,\n          42725.0,\n          964.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 735.6722913003581,\n        \"min\": 24.014408621917674,\n        \"max\": 2022.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1989.2448132780082,\n          1994.0,\n          964.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dg = df.groupby(\"home_team\")[\"home_xg\"]"
      ],
      "metadata": {
        "id": "lxBNVR8auSV4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(dg.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ByptEn2lpD3L",
        "outputId": "742b3425-b7ef-42ce-cec4-5d67653b8a0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "home_team\n",
            "Algeria              NaN\n",
            "Angola               NaN\n",
            "Argentina       1.842857\n",
            "Australia       0.750000\n",
            "Austria              NaN\n",
            "                  ...   \n",
            "Uruguay         1.240000\n",
            "Wales           0.600000\n",
            "West Germany         NaN\n",
            "Yugoslavia           NaN\n",
            "Zaire                NaN\n",
            "Name: home_xg, Length: 82, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "das = pd.DataFrame({\n",
        "    'Branch':['CSE','ECE','CSE','BBA','BBA'],\n",
        "    'Name':['virat','Bindu','Chennai','priya','leela'],\n",
        "    'Salary':[1000,2000,15000,15000,13000],\n",
        "})"
      ],
      "metadata": {
        "id": "2FTHtp9UuiyI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "das"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "rAMuUMVEuilX",
        "outputId": "6068b42f-1240-48cf-dd70-e891825c8041"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Branch     Name  Salary\n",
              "0    CSE    virat    1000\n",
              "1    ECE    Bindu    2000\n",
              "2    CSE  Chennai   15000\n",
              "3    BBA    priya   15000\n",
              "4    BBA    leela   13000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a5ff1f93-a0f7-4910-9491-8e38259d8795\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Branch</th>\n",
              "      <th>Name</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CSE</td>\n",
              "      <td>virat</td>\n",
              "      <td>1000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ECE</td>\n",
              "      <td>Bindu</td>\n",
              "      <td>2000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CSE</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>15000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>BBA</td>\n",
              "      <td>priya</td>\n",
              "      <td>15000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>BBA</td>\n",
              "      <td>leela</td>\n",
              "      <td>13000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5ff1f93-a0f7-4910-9491-8e38259d8795')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a5ff1f93-a0f7-4910-9491-8e38259d8795 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a5ff1f93-a0f7-4910-9491-8e38259d8795');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9d9c351e-527a-49bb-a780-033d2895cebd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d9c351e-527a-49bb-a780-033d2895cebd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9d9c351e-527a-49bb-a780-033d2895cebd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3745bbaa-9dcb-43e0-a54f-372336381b0e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('das')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3745bbaa-9dcb-43e0-a54f-372336381b0e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('das');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "das",
              "summary": "{\n  \"name\": \"das\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Branch\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"CSE\",\n          \"ECE\",\n          \"BBA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Bindu\",\n          \"leela\",\n          \"Chennai\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7085,\n        \"min\": 1000,\n        \"max\": 15000,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2000,\n          13000,\n          1000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " sv = das.groupby('Branch')['Salary']"
      ],
      "metadata": {
        "id": "f7KJ6NUawO2e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sv.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "J7pCqAW9w6pZ",
        "outputId": "5f3505f6-9d99-4cb4-93ed-afcc610ef8c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Branch\n",
              "BBA    14000.0\n",
              "CSE     8000.0\n",
              "ECE     2000.0\n",
              "Name: Sarlary, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sarlary</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Branch</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>BBA</th>\n",
              "      <td>14000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CSE</th>\n",
              "      <td>8000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ECE</th>\n",
              "      <td>2000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sv.agg(['mean','min'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "collapsed": true,
        "id": "wVIPkcLdxMmZ",
        "outputId": "590386ce-4ea1-4230-8082-3f45eb4719ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           mean    min\n",
              "Branch                \n",
              "BBA     14000.0  13000\n",
              "CSE      8000.0   1000\n",
              "ECE      2000.0   2000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fea2a4ed-b6a5-4a5d-9284-b60c98cf57b6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean</th>\n",
              "      <th>min</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Branch</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>BBA</th>\n",
              "      <td>14000.0</td>\n",
              "      <td>13000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CSE</th>\n",
              "      <td>8000.0</td>\n",
              "      <td>1000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ECE</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>2000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fea2a4ed-b6a5-4a5d-9284-b60c98cf57b6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fea2a4ed-b6a5-4a5d-9284-b60c98cf57b6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fea2a4ed-b6a5-4a5d-9284-b60c98cf57b6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1dfcebc3-95f3-41bd-ac76-e96ad4606a15\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1dfcebc3-95f3-41bd-ac76-e96ad4606a15')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1dfcebc3-95f3-41bd-ac76-e96ad4606a15 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"sv\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Branch\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"BBA\",\n          \"CSE\",\n          \"ECE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6000.0,\n        \"min\": 2000.0,\n        \"max\": 14000.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          14000.0,\n          8000.0,\n          2000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6658,\n        \"min\": 1000,\n        \"max\": 13000,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          13000,\n          1000,\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sv2 = das.groupby(['Branch','Name'])['Salary']"
      ],
      "metadata": {
        "collapsed": true,
        "id": "ZwuoSMtPxeNv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sv2.max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "AYYaMyfHx06T",
        "outputId": "a4368f21-85c6-446a-e5b1-b9bc609c84de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Branch  Name   \n",
              "BBA     leela      13000\n",
              "        priya      15000\n",
              "CSE     Chennai    15000\n",
              "        virat       1000\n",
              "ECE     Bindu       2000\n",
              "Name: Salary, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Branch</th>\n",
              "      <th>Name</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">BBA</th>\n",
              "      <th>leela</th>\n",
              "      <td>13000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>priya</th>\n",
              "      <td>15000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">CSE</th>\n",
              "      <th>Chennai</th>\n",
              "      <td>15000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>virat</th>\n",
              "      <td>1000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ECE</th>\n",
              "      <th>Bindu</th>\n",
              "      <td>2000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1d-X-hQhDG8HB-nbPJHbBmb07zr-wMDhV",
      "authorship_tag": "ABX9TyMDkgVxOyv68FbyJZcYeB5G",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}